
simpleserial-aes-CWLITEXMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  00000ca2  00000d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e4  00802020  00802020  00000d56  2**0
                  ALLOC
  3 .stab         000000c0  00000000  00000000  00000d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000003f  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000e57  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000140  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004406  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002c9e  00000000  00000000  000053ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000d35  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000004b0  00000000  00000000  00008dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000206b  00000000  00000000  00009274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001271  00000000  00000000  0000b2df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  0000c550  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__ctors_end>
   4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
   8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
   c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  10:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  14:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  18:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  1c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  20:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  24:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  28:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  2c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  30:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  34:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  38:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  3c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  40:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  44:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  48:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  4c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  50:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  54:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  58:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  5c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  60:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  64:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  68:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  6c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  70:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  74:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  78:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  7c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  80:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  84:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  88:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  8c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  90:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  94:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  98:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  9c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  a0:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  a4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  a8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  ac:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  b0:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  b4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  b8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  bc:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  c0:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  c4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  c8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  cc:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  d0:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  d4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  d8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  dc:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  e0:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  e4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  e8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  ec:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  f0:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  f4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  f8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  fc:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 100:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 104:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 108:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 10c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 110:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 114:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 118:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 11c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 120:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 124:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 128:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 12c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 130:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 134:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 138:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 13c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 140:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 144:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 148:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 14c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 150:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 154:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 158:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 15c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 160:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 164:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 168:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 16c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 170:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 174:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 178:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 17c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 180:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 184:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 188:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 18c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 190:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 194:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 198:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 19c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 1a0:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 1a4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 1a8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 1ac:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 1b0:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 1b4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 1b8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 1bc:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 1c0:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
 1c4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 96 01 	jmp	0x32c	; 0x32c <reset>
 1cc:	0c 94 9c 01 	jmp	0x338	; 0x338 <get_key>
 1d0:	0c 94 bd 01 	jmp	0x37a	; 0x37a <check_version>
 1d4:	0c 94 a0 01 	jmp	0x340	; 0x340 <get_pt>
 1d8:	0c 94 98 01 	jmp	0x330	; 0x330 <get_mask>

000001dc <__trampolines_end>:
 1dc:	01 02       	muls	r16, r17
 1de:	04 08       	sbc	r0, r4
 1e0:	10 20       	and	r1, r0
 1e2:	40 80       	ld	r4, Z
 1e4:	1b 36       	cpi	r17, 0x6B	; 107

000001e6 <aes_sbox>:
 1e6:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
 1f6:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
 206:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
 216:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
 226:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
 236:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
 246:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
 256:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
 266:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
 276:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
 286:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
 296:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
 2a6:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
 2b6:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
 2c6:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
 2d6:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

000002e6 <__ctors_end>:
 2e6:	11 24       	eor	r1, r1
 2e8:	1f be       	out	0x3f, r1	; 63
 2ea:	cf ef       	ldi	r28, 0xFF	; 255
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	df e3       	ldi	r29, 0x3F	; 63
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	00 e0       	ldi	r16, 0x00	; 0
 2f4:	0c bf       	out	0x3c, r16	; 60

000002f6 <__do_copy_data>:
 2f6:	10 e2       	ldi	r17, 0x20	; 32
 2f8:	a0 e0       	ldi	r26, 0x00	; 0
 2fa:	b0 e2       	ldi	r27, 0x20	; 32
 2fc:	e2 ea       	ldi	r30, 0xA2	; 162
 2fe:	fc e0       	ldi	r31, 0x0C	; 12
 300:	00 e0       	ldi	r16, 0x00	; 0
 302:	0b bf       	out	0x3b, r16	; 59
 304:	02 c0       	rjmp	.+4      	; 0x30a <__do_copy_data+0x14>
 306:	07 90       	elpm	r0, Z+
 308:	0d 92       	st	X+, r0
 30a:	a0 32       	cpi	r26, 0x20	; 32
 30c:	b1 07       	cpc	r27, r17
 30e:	d9 f7       	brne	.-10     	; 0x306 <__do_copy_data+0x10>

00000310 <__do_clear_bss>:
 310:	21 e2       	ldi	r18, 0x21	; 33
 312:	a0 e2       	ldi	r26, 0x20	; 32
 314:	b0 e2       	ldi	r27, 0x20	; 32
 316:	01 c0       	rjmp	.+2      	; 0x31a <.do_clear_bss_start>

00000318 <.do_clear_bss_loop>:
 318:	1d 92       	st	X+, r1

0000031a <.do_clear_bss_start>:
 31a:	a4 30       	cpi	r26, 0x04	; 4
 31c:	b2 07       	cpc	r27, r18
 31e:	e1 f7       	brne	.-8      	; 0x318 <.do_clear_bss_loop>
 320:	0e 94 f6 05 	call	0xbec	; 0xbec <main>
 324:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <_exit>

00000328 <__bad_interrupt>:
 328:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000032c <reset>:

uint8_t reset(uint8_t* x)
{
    // Reset key here if needed
	return 0x00;
}
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	08 95       	ret

00000330 <get_mask>:
#include <stdint.h>
#include <stdlib.h>

uint8_t get_mask(uint8_t* m)
{
  aes_indep_mask(m);
 330:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <aes_indep_mask>
  return 0x00;
}
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret

00000338 <get_key>:

uint8_t get_key(uint8_t* k)
{
	aes_indep_key(k);
 338:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <aes_indep_key>
	return 0x00;
}
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret

00000340 <get_pt>:

uint8_t get_pt(uint8_t* pt)
{
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	ec 01       	movw	r28, r24
	trigger_high();
 34c:	00 e0       	ldi	r16, 0x00	; 0
 34e:	16 e0       	ldi	r17, 0x06	; 6
 350:	ff 24       	eor	r15, r15
 352:	f3 94       	inc	r15
 354:	f8 01       	movw	r30, r16
 356:	f5 82       	std	Z+5, r15	; 0x05

  #ifdef ADD_JITTER
  for (volatile uint8_t k = 0; k < (*pt & 0x0F); k++);
  #endif

	aes_indep_enc(pt); /* encrypting the data block */
 358:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <aes_indep_enc>
	trigger_low();
 35c:	f8 01       	movw	r30, r16
 35e:	f6 82       	std	Z+6, r15	; 0x06
	simpleserial_put('r', 16, pt);
 360:	ae 01       	movw	r20, r28
 362:	60 e1       	ldi	r22, 0x10	; 16
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	82 e7       	ldi	r24, 0x72	; 114
 368:	0e 94 2e 02 	call	0x45c	; 0x45c <simpleserial_put>
	return 0x00;
}
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	ff 90       	pop	r15
 378:	08 95       	ret

0000037a <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t* v)
{
	return 0x00;
}
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	08 95       	ret

0000037e <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 37e:	db 01       	movw	r26, r22
	for(int i = 0; i < len; i++)
 380:	fa 01       	movw	r30, r20
 382:	9f 01       	movw	r18, r30
 384:	24 1b       	sub	r18, r20
 386:	35 0b       	sbc	r19, r21
 388:	28 17       	cp	r18, r24
 38a:	39 07       	cpc	r19, r25
 38c:	d4 f5       	brge	.+116    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		char n_hi = ascii_buf[2*i];
 38e:	2c 91       	ld	r18, X
		char n_lo = ascii_buf[2*i+1];
 390:	11 96       	adiw	r26, 0x01	; 1
 392:	3c 91       	ld	r19, X
 394:	11 97       	sbiw	r26, 0x01	; 1

		if(n_lo >= '0' && n_lo <= '9')
 396:	60 ed       	ldi	r22, 0xD0	; 208
 398:	63 0f       	add	r22, r19
 39a:	6a 30       	cpi	r22, 0x0A	; 10
 39c:	10 f4       	brcc	.+4      	; 0x3a2 <hex_decode+0x24>
			data_buf[i] = n_lo - '0';
 39e:	60 83       	st	Z, r22
 3a0:	0f c0       	rjmp	.+30     	; 0x3c0 <hex_decode+0x42>
		else if(n_lo >= 'A' && n_lo <= 'F')
 3a2:	6f eb       	ldi	r22, 0xBF	; 191
 3a4:	63 0f       	add	r22, r19
 3a6:	66 30       	cpi	r22, 0x06	; 6
 3a8:	10 f4       	brcc	.+4      	; 0x3ae <hex_decode+0x30>
			data_buf[i] = n_lo - 'A' + 10;
 3aa:	37 53       	subi	r19, 0x37	; 55
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <hex_decode+0x40>
		else if(n_lo >= 'a' && n_lo <= 'f')
 3ae:	6f e9       	ldi	r22, 0x9F	; 159
 3b0:	63 0f       	add	r22, r19
 3b2:	66 30       	cpi	r22, 0x06	; 6
 3b4:	18 f0       	brcs	.+6      	; 0x3bc <hex_decode+0x3e>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	08 95       	ret
		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
 3bc:	37 55       	subi	r19, 0x57	; 87
 3be:	30 83       	st	Z, r19
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
 3c0:	30 ed       	ldi	r19, 0xD0	; 208
 3c2:	32 0f       	add	r19, r18
 3c4:	3a 30       	cpi	r19, 0x0A	; 10
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <hex_decode+0x50>
			data_buf[i] |= (n_hi - '0') << 4;
 3c8:	22 95       	swap	r18
 3ca:	20 7f       	andi	r18, 0xF0	; 240
 3cc:	14 c0       	rjmp	.+40     	; 0x3f6 <hex_decode+0x78>
		else if(n_hi >= 'A' && n_hi <= 'F')
 3ce:	3f eb       	ldi	r19, 0xBF	; 191
 3d0:	32 0f       	add	r19, r18
 3d2:	36 30       	cpi	r19, 0x06	; 6
 3d4:	20 f4       	brcc	.+8      	; 0x3de <hex_decode+0x60>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	27 53       	subi	r18, 0x37	; 55
 3da:	31 09       	sbc	r19, r1
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <hex_decode+0x6e>
		else if(n_hi >= 'a' && n_hi <= 'f')
 3de:	3f e9       	ldi	r19, 0x9F	; 159
 3e0:	32 0f       	add	r19, r18
 3e2:	36 30       	cpi	r19, 0x06	; 6
 3e4:	40 f7       	brcc	.-48     	; 0x3b6 <hex_decode+0x38>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	27 55       	subi	r18, 0x57	; 87
 3ea:	31 09       	sbc	r19, r1
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	6a 95       	dec	r22
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <hex_decode+0x70>
 3f6:	30 81       	ld	r19, Z
 3f8:	23 2b       	or	r18, r19
 3fa:	20 83       	st	Z, r18
 3fc:	31 96       	adiw	r30, 0x01	; 1
 3fe:	12 96       	adiw	r26, 0x02	; 2
 400:	c0 cf       	rjmp	.-128    	; 0x382 <hex_decode+0x4>
		else
			return 1;
	}

	return 0;
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
}
 406:	08 95       	ret

00000408 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS)
 408:	20 91 20 20 	lds	r18, 0x2020	; 0x802020 <__data_end>
 40c:	30 91 21 20 	lds	r19, 0x2021	; 0x802021 <__data_end+0x1>
 410:	2a 30       	cpi	r18, 0x0A	; 10
 412:	31 05       	cpc	r19, r1
 414:	cc f4       	brge	.+50     	; 0x448 <simpleserial_addcmd+0x40>
		return 1;

	if(len >= MAX_SS_LEN)
 416:	60 34       	cpi	r22, 0x40	; 64
 418:	71 05       	cpc	r23, r1
 41a:	b0 f4       	brcc	.+44     	; 0x448 <simpleserial_addcmd+0x40>
		return 1;

	commands[num_commands].c   = c;
 41c:	95 e0       	ldi	r25, 0x05	; 5
 41e:	92 9f       	mul	r25, r18
 420:	f0 01       	movw	r30, r0
 422:	93 9f       	mul	r25, r19
 424:	f0 0d       	add	r31, r0
 426:	11 24       	eor	r1, r1
 428:	ee 5d       	subi	r30, 0xDE	; 222
 42a:	ff 4d       	sbci	r31, 0xDF	; 223
 42c:	80 83       	st	Z, r24
	commands[num_commands].len = len;
 42e:	61 83       	std	Z+1, r22	; 0x01
 430:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
 432:	43 83       	std	Z+3, r20	; 0x03
 434:	54 83       	std	Z+4, r21	; 0x04
	num_commands++;
 436:	2f 5f       	subi	r18, 0xFF	; 255
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	20 93 20 20 	sts	0x2020, r18	; 0x802020 <__data_end>
 43e:	30 93 21 20 	sts	0x2021, r19	; 0x802021 <__data_end+0x1>

	return 0;
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	08 95       	ret
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS)
		return 1;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 44c:	08 95       	ret

0000044e <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
	simpleserial_addcmd('v', 0, check_version);
 44e:	4d eb       	ldi	r20, 0xBD	; 189
 450:	51 e0       	ldi	r21, 0x01	; 1
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	86 e7       	ldi	r24, 0x76	; 118
 458:	0c 94 04 02 	jmp	0x408	; 0x408 <simpleserial_addcmd>

0000045c <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, int size, uint8_t* output)
{
 45c:	cf 92       	push	r12
 45e:	df 92       	push	r13
 460:	ef 92       	push	r14
 462:	ff 92       	push	r15
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	8b 01       	movw	r16, r22
 46e:	ea 01       	movw	r28, r20
	// Write first character
	putch(c);
 470:	0e 94 2d 03 	call	0x65a	; 0x65a <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 474:	7e 01       	movw	r14, r28
 476:	c7 01       	movw	r24, r14
 478:	8c 1b       	sub	r24, r28
 47a:	9d 0b       	sbc	r25, r29
 47c:	80 17       	cp	r24, r16
 47e:	91 07       	cpc	r25, r17
 480:	b4 f4       	brge	.+44     	; 0x4ae <simpleserial_put+0x52>
 482:	67 01       	movw	r12, r14
	{
		putch(hex_lookup[output[i] >> 4 ]);
 484:	d7 01       	movw	r26, r14
 486:	ed 91       	ld	r30, X+
 488:	7d 01       	movw	r14, r26
 48a:	e2 95       	swap	r30
 48c:	ef 70       	andi	r30, 0x0F	; 15
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	e0 5f       	subi	r30, 0xF0	; 240
 492:	ff 4d       	sbci	r31, 0xDF	; 223
 494:	80 81       	ld	r24, Z
 496:	0e 94 2d 03 	call	0x65a	; 0x65a <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
 49a:	d6 01       	movw	r26, r12
 49c:	ec 91       	ld	r30, X
 49e:	ef 70       	andi	r30, 0x0F	; 15
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	e0 5f       	subi	r30, 0xF0	; 240
 4a4:	ff 4d       	sbci	r31, 0xDF	; 223
 4a6:	80 81       	ld	r24, Z
 4a8:	0e 94 2d 03 	call	0x65a	; 0x65a <output_ch_0>
 4ac:	e4 cf       	rjmp	.-56     	; 0x476 <simpleserial_put+0x1a>
	}

	// Write trailing '\n'
	putch('\n');
 4ae:	8a e0       	ldi	r24, 0x0A	; 10
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	df 90       	pop	r13
 4be:	cf 90       	pop	r12
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 4c0:	0c 94 2d 03 	jmp	0x65a	; 0x65a <output_ch_0>

000004c4 <simpleserial_get>:

	return 0;
}

void simpleserial_get(void)
{
 4c4:	af 92       	push	r10
 4c6:	bf 92       	push	r11
 4c8:	cf 92       	push	r12
 4ca:	df 92       	push	r13
 4cc:	ef 92       	push	r14
 4ce:	ff 92       	push	r15
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	c1 5c       	subi	r28, 0xC1	; 193
 4de:	d1 09       	sbc	r29, r1
 4e0:	cd bf       	out	0x3d, r28	; 61
 4e2:	de bf       	out	0x3e, r29	; 62
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 4e4:	0e 94 26 03 	call	0x64c	; 0x64c <input_ch_0>

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 4e8:	40 91 20 20 	lds	r20, 0x2020	; 0x802020 <__data_end>
 4ec:	50 91 21 20 	lds	r21, 0x2021	; 0x802021 <__data_end+0x1>
 4f0:	22 e2       	ldi	r18, 0x22	; 34
 4f2:	30 e2       	ldi	r19, 0x20	; 32
 4f4:	00 e0       	ldi	r16, 0x00	; 0
 4f6:	10 e0       	ldi	r17, 0x00	; 0
 4f8:	04 17       	cp	r16, r20
 4fa:	15 07       	cpc	r17, r21
 4fc:	54 f4       	brge	.+20     	; 0x512 <simpleserial_get+0x4e>
 4fe:	2b 5f       	subi	r18, 0xFB	; 251
 500:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if(commands[cmd].c == c)
 502:	f9 01       	movw	r30, r18
 504:	35 97       	sbiw	r30, 0x05	; 5
 506:	90 81       	ld	r25, Z
 508:	89 17       	cp	r24, r25
 50a:	39 f0       	breq	.+14     	; 0x51a <simpleserial_get+0x56>

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 50c:	0f 5f       	subi	r16, 0xFF	; 255
 50e:	1f 4f       	sbci	r17, 0xFF	; 255
 510:	f3 cf       	rjmp	.-26     	; 0x4f8 <simpleserial_get+0x34>
		if(commands[cmd].c == c)
			break;
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 512:	04 17       	cp	r16, r20
 514:	15 07       	cpc	r17, r21
 516:	09 f4       	brne	.+2      	; 0x51a <simpleserial_get+0x56>
 518:	54 c0       	rjmp	.+168    	; 0x5c2 <simpleserial_get+0xfe>
 51a:	9e 01       	movw	r18, r28
 51c:	2f 5f       	subi	r18, 0xFF	; 255
 51e:	3f 4f       	sbci	r19, 0xFF	; 255
 520:	79 01       	movw	r14, r18

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 522:	69 01       	movw	r12, r18
	// If we didn't find a match, give up right away
	if(cmd == num_commands)
		return;

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 524:	25 e0       	ldi	r18, 0x05	; 5
 526:	20 9f       	mul	r18, r16
 528:	c0 01       	movw	r24, r0
 52a:	21 9f       	mul	r18, r17
 52c:	90 0d       	add	r25, r0
 52e:	11 24       	eor	r1, r1
 530:	dc 01       	movw	r26, r24
 532:	ad 5d       	subi	r26, 0xDD	; 221
 534:	bf 4d       	sbci	r27, 0xDF	; 223
 536:	5d 01       	movw	r10, r26
 538:	d5 01       	movw	r26, r10
 53a:	8d 91       	ld	r24, X+
 53c:	9c 91       	ld	r25, X
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	96 01       	movw	r18, r12
 544:	2e 19       	sub	r18, r14
 546:	3f 09       	sbc	r19, r15
 548:	28 17       	cp	r18, r24
 54a:	39 07       	cpc	r19, r25
 54c:	50 f4       	brcc	.+20     	; 0x562 <simpleserial_get+0x9e>
	{
		c = getch();
 54e:	0e 94 26 03 	call	0x64c	; 0x64c <input_ch_0>

		// Check for early \n
		if(c == '\n' || c == '\r')
 552:	8a 30       	cpi	r24, 0x0A	; 10
 554:	b1 f1       	breq	.+108    	; 0x5c2 <simpleserial_get+0xfe>
 556:	8d 30       	cpi	r24, 0x0D	; 13
 558:	a1 f1       	breq	.+104    	; 0x5c2 <simpleserial_get+0xfe>
			return;

		ascii_buf[i] = c;
 55a:	f6 01       	movw	r30, r12
 55c:	81 93       	st	Z+, r24
 55e:	6f 01       	movw	r12, r30
 560:	eb cf       	rjmp	.-42     	; 0x538 <simpleserial_get+0x74>
	}

	// Assert that last character is \n or \r
	c = getch();
 562:	0e 94 26 03 	call	0x64c	; 0x64c <input_ch_0>
	if(c != '\n' && c != '\r')
 566:	8a 30       	cpi	r24, 0x0A	; 10
 568:	11 f0       	breq	.+4      	; 0x56e <simpleserial_get+0xaa>
 56a:	8d 30       	cpi	r24, 0x0D	; 13
 56c:	51 f5       	brne	.+84     	; 0x5c2 <simpleserial_get+0xfe>
		return;

	// ASCII buffer is full: convert to bytes 
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 56e:	25 e0       	ldi	r18, 0x05	; 5
 570:	20 9f       	mul	r18, r16
 572:	c0 01       	movw	r24, r0
 574:	21 9f       	mul	r18, r17
 576:	90 0d       	add	r25, r0
 578:	11 24       	eor	r1, r1
 57a:	8c 01       	movw	r16, r24
 57c:	0e 5d       	subi	r16, 0xDE	; 222
 57e:	1f 4d       	sbci	r17, 0xDF	; 223
 580:	ae 01       	movw	r20, r28
 582:	4f 57       	subi	r20, 0x7F	; 127
 584:	5f 4f       	sbci	r21, 0xFF	; 255
 586:	b7 01       	movw	r22, r14
 588:	f8 01       	movw	r30, r16
 58a:	81 81       	ldd	r24, Z+1	; 0x01
 58c:	92 81       	ldd	r25, Z+2	; 0x02
 58e:	0e 94 bf 01 	call	0x37e	; 0x37e <hex_decode>
 592:	89 2b       	or	r24, r25
 594:	b1 f4       	brne	.+44     	; 0x5c2 <simpleserial_get+0xfe>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf);
 596:	d8 01       	movw	r26, r16
 598:	13 96       	adiw	r26, 0x03	; 3
 59a:	ed 91       	ld	r30, X+
 59c:	fc 91       	ld	r31, X
 59e:	14 97       	sbiw	r26, 0x04	; 4
 5a0:	ce 01       	movw	r24, r28
 5a2:	8f 57       	subi	r24, 0x7F	; 127
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	19 95       	eicall
 5a8:	cf 53       	subi	r28, 0x3F	; 63
 5aa:	df 4f       	sbci	r29, 0xFF	; 255
 5ac:	88 83       	st	Y, r24
 5ae:	c1 5c       	subi	r28, 0xC1	; 193
 5b0:	d0 40       	sbci	r29, 0x00	; 0
	
	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 5b2:	ae 01       	movw	r20, r28
 5b4:	4f 53       	subi	r20, 0x3F	; 63
 5b6:	5f 4f       	sbci	r21, 0xFF	; 255
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	8a e7       	ldi	r24, 0x7A	; 122
 5be:	0e 94 2e 02 	call	0x45c	; 0x45c <simpleserial_put>
#endif
}
 5c2:	cf 53       	subi	r28, 0x3F	; 63
 5c4:	df 4f       	sbci	r29, 0xFF	; 255
 5c6:	cd bf       	out	0x3d, r28	; 61
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	ff 90       	pop	r15
 5d4:	ef 90       	pop	r14
 5d6:	df 90       	pop	r13
 5d8:	cf 90       	pop	r12
 5da:	bf 90       	pop	r11
 5dc:	af 90       	pop	r10
 5de:	08 95       	ret

000005e0 <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 5e0:	e0 e4       	ldi	r30, 0x40	; 64
 5e2:	f6 e0       	ldi	r31, 0x06	; 6
 5e4:	88 e0       	ldi	r24, 0x08	; 8
 5e6:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 5e8:	84 e0       	ldi	r24, 0x04	; 4
 5ea:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 5ec:	e0 ea       	ldi	r30, 0xA0	; 160
 5ee:	f8 e0       	ldi	r31, 0x08	; 8
 5f0:	83 e0       	ldi	r24, 0x03	; 3
 5f2:	85 83       	std	Z+5, r24	; 0x05
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (1/(16*(((I/O clock frequency)/Baudrate)-1)
	 *                 = 12
	 */
	USART_Baudrate_Set(&USART, 11, 0);
 5f4:	8b e0       	ldi	r24, 0x0B	; 11
 5f6:	86 83       	std	Z+6, r24	; 0x06
 5f8:	17 82       	std	Z+7, r1	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 5fa:	84 81       	ldd	r24, Z+4	; 0x04
 5fc:	80 61       	ori	r24, 0x10	; 16
 5fe:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 600:	84 81       	ldd	r24, Z+4	; 0x04
 602:	88 60       	ori	r24, 0x08	; 8
 604:	84 83       	std	Z+4, r24	; 0x04
 606:	08 95       	ret

00000608 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	1f 92       	push	r1
 60e:	1f 92       	push	r1
 610:	cd b7       	in	r28, 0x3d	; 61
 612:	de b7       	in	r29, 0x3e	; 62
 614:	69 83       	std	Y+1, r22	; 0x01
 616:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	30 e0       	ldi	r19, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 61c:	49 81       	ldd	r20, Y+1	; 0x01
 61e:	5a 81       	ldd	r21, Y+2	; 0x02
 620:	24 17       	cp	r18, r20
 622:	35 07       	cpc	r19, r21
 624:	69 f0       	breq	.+26     	; 0x640 <input_ch_w_timeout_0+0x38>
		{	
		if (USART_IsRXComplete(&USART))
 626:	40 91 a1 08 	lds	r20, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 62a:	47 ff       	sbrs	r20, 7
 62c:	06 c0       	rjmp	.+12     	; 0x63a <input_ch_w_timeout_0+0x32>
			{
			*data = USART_GetChar(&USART);
 62e:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 632:	fc 01       	movw	r30, r24
 634:	20 83       	st	Z, r18
			return BYTE_REC;
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	04 c0       	rjmp	.+8      	; 0x642 <input_ch_w_timeout_0+0x3a>
			}
		timeout_counter++;
 63a:	2f 5f       	subi	r18, 0xFF	; 255
 63c:	3f 4f       	sbci	r19, 0xFF	; 255
 63e:	ee cf       	rjmp	.-36     	; 0x61c <input_ch_w_timeout_0+0x14>
		}
		
	return TIMEOUT;
 640:	80 e0       	ldi	r24, 0x00	; 0
	}
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

0000064c <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 64c:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 650:	87 ff       	sbrs	r24, 7
 652:	fc cf       	rjmp	.-8      	; 0x64c <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 654:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	}
 658:	08 95       	ret

0000065a <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 65a:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
 65e:	95 ff       	sbrs	r25, 5
 660:	fc cf       	rjmp	.-8      	; 0x65a <output_ch_0>
	USART_PutChar(&USART, data);
 662:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 666:	08 95       	ret

00000668 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 668:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 66a:	60 83       	st	Z, r22
 66c:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 66e:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 670:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 672:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 674:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 676:	15 86       	std	Z+13, r1	; 0x0d
 678:	08 95       	ret

0000067a <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 67a:	fc 01       	movw	r30, r24
 67c:	62 83       	std	Z+2, r22	; 0x02
 67e:	08 95       	ret

00000680 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 680:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 682:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 684:	26 85       	ldd	r18, Z+14	; 0x0e

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 686:	9f 5f       	subi	r25, 0xFF	; 255
 688:	93 70       	andi	r25, 0x03	; 3
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	92 13       	cpse	r25, r18
 68e:	01 c0       	rjmp	.+2      	; 0x692 <USART_TXBuffer_FreeSpace+0x12>
 690:	80 e0       	ldi	r24, 0x00	; 0
}
 692:	08 95       	ret

00000694 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 694:	1f 93       	push	r17
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	ec 01       	movw	r28, r24
 69c:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 69e:	0e 94 40 03 	call	0x680	; 0x680 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 6a2:	88 23       	and	r24, r24
 6a4:	79 f0       	breq	.+30     	; 0x6c4 <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 6a6:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 6a8:	fe 01       	movw	r30, r28
 6aa:	e9 0f       	add	r30, r25
 6ac:	f1 1d       	adc	r31, r1
 6ae:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 6b0:	9f 5f       	subi	r25, 0xFF	; 255
 6b2:	93 70       	andi	r25, 0x03	; 3
 6b4:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 6b6:	e8 81       	ld	r30, Y
 6b8:	f9 81       	ldd	r31, Y+1	; 0x01
 6ba:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 6bc:	9c 7f       	andi	r25, 0xFC	; 252
 6be:	2a 81       	ldd	r18, Y+2	; 0x02
 6c0:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 6c2:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	1f 91       	pop	r17
 6ca:	08 95       	ret

000006cc <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 6cc:	fc 01       	movw	r30, r24
 6ce:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 6d0:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	29 13       	cpse	r18, r25
 6d6:	01 c0       	rjmp	.+2      	; 0x6da <USART_RXBufferData_Available+0xe>
 6d8:	80 e0       	ldi	r24, 0x00	; 0
}
 6da:	08 95       	ret

000006dc <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 6dc:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 6de:	84 85       	ldd	r24, Z+12	; 0x0c
 6e0:	df 01       	movw	r26, r30
 6e2:	a8 0f       	add	r26, r24
 6e4:	b1 1d       	adc	r27, r1
 6e6:	13 96       	adiw	r26, 0x03	; 3
 6e8:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 6ea:	94 85       	ldd	r25, Z+12	; 0x0c
 6ec:	9f 5f       	subi	r25, 0xFF	; 255
 6ee:	93 70       	andi	r25, 0x03	; 3
 6f0:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 6f2:	08 95       	ret

000006f4 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 6f4:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 6f6:	83 85       	ldd	r24, Z+11	; 0x0b
 6f8:	8f 5f       	subi	r24, 0xFF	; 255
 6fa:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 6fc:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 6fe:	a0 81       	ld	r26, Z
 700:	b1 81       	ldd	r27, Z+1	; 0x01
 702:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
 704:	82 17       	cp	r24, r18
 706:	49 f0       	breq	.+18     	; 0x71a <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 708:	23 85       	ldd	r18, Z+11	; 0x0b
 70a:	df 01       	movw	r26, r30
 70c:	a2 0f       	add	r26, r18
 70e:	b1 1d       	adc	r27, r1
 710:	13 96       	adiw	r26, 0x03	; 3
 712:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
 714:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 71a:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 71c:	08 95       	ret

0000071e <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 724:	96 85       	ldd	r25, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 726:	85 85       	ldd	r24, Z+13	; 0x0d
 728:	a0 81       	ld	r26, Z
 72a:	b1 81       	ldd	r27, Z+1	; 0x01
 72c:	98 13       	cpse	r25, r24
 72e:	07 c0       	rjmp	.+14     	; 0x73e <USART_DataRegEmpty+0x20>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 730:	13 96       	adiw	r26, 0x03	; 3
 732:	8c 91       	ld	r24, X
 734:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 736:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 738:	13 96       	adiw	r26, 0x03	; 3
 73a:	8c 93       	st	X, r24
 73c:	0a c0       	rjmp	.+20     	; 0x752 <USART_DataRegEmpty+0x34>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 73e:	86 85       	ldd	r24, Z+14	; 0x0e
 740:	ef 01       	movw	r28, r30
 742:	c8 0f       	add	r28, r24
 744:	d1 1d       	adc	r29, r1
 746:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
 748:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 74a:	86 85       	ldd	r24, Z+14	; 0x0e
 74c:	8f 5f       	subi	r24, 0xFF	; 255
 74e:	83 70       	andi	r24, 0x03	; 3
 750:	86 87       	std	Z+14, r24	; 0x0e
	}
}
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	08 95       	ret

00000758 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 758:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 75a:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
 75c:	70 ff       	sbrs	r23, 0
 75e:	02 c0       	rjmp	.+4      	; 0x764 <USART_NineBits_PutChar+0xc>
		usart->CTRLB |= USART_TXB8_bm;
 760:	81 60       	ori	r24, 0x01	; 1
 762:	01 c0       	rjmp	.+2      	; 0x766 <USART_NineBits_PutChar+0xe>
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 764:	8e 7f       	andi	r24, 0xFE	; 254
 766:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 768:	60 83       	st	Z, r22
 76a:	08 95       	ret

0000076c <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 76c:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 76e:	84 81       	ldd	r24, Z+4	; 0x04
 770:	80 ff       	sbrs	r24, 0
 772:	04 c0       	rjmp	.+8      	; 0x77c <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
 774:	80 81       	ld	r24, Z
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	91 60       	ori	r25, 0x01	; 1
 77a:	08 95       	ret
	}else {
		return(usart->DATA);
 77c:	80 81       	ld	r24, Z
 77e:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 780:	08 95       	ret

00000782 <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 782:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    OSC.PLLCTRL = 0x00;
 786:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
    OSC.CTRL |= OSC_XOSCEN_bm;
 78a:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 78e:	88 60       	ori	r24, 0x08	; 8
 790:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 794:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 798:	83 ff       	sbrs	r24, 3
 79a:	fc cf       	rjmp	.-8      	; 0x794 <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 79c:	88 ed       	ldi	r24, 0xD8	; 216
 79e:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 7a0:	83 e0       	ldi	r24, 0x03	; 3
 7a2:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 7a6:	88 e0       	ldi	r24, 0x08	; 8
 7a8:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 7ac:	08 95       	ret

000007ae <aes_indep_init>:
#include "aes_keyschedule.h"

aes128_ctx_t ctx;

void aes_indep_init(void)
{
 7ae:	08 95       	ret

000007b0 <aes_indep_key>:
	;
}

void aes_indep_key(uint8_t * key)
{
	aes128_init(key, &ctx);
 7b0:	64 e5       	ldi	r22, 0x54	; 84
 7b2:	70 e2       	ldi	r23, 0x20	; 32
 7b4:	0c 94 d7 05 	jmp	0xbae	; 0xbae <aes128_init>

000007b8 <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt)
{
	aes128_enc(pt, &ctx); /* encrypting the data block */
 7b8:	64 e5       	ldi	r22, 0x54	; 84
 7ba:	70 e2       	ldi	r23, 0x20	; 32
 7bc:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <aes128_enc>

000007c0 <aes_indep_mask>:
}

void aes_indep_mask(uint8_t * m)
{
 7c0:	08 95       	ret

000007c2 <aes_shiftcol>:
#include "gf256mul.h"
#include "aes_sbox.h"
#include "aes_enc.h"
#include <avr/pgmspace.h>

void aes_shiftcol(void* data, uint8_t shift){
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	00 d0       	rcall	.+0      	; 0x7c8 <aes_shiftcol+0x6>
 7c8:	1f 92       	push	r1
 7ca:	cd b7       	in	r28, 0x3d	; 61
 7cc:	de b7       	in	r29, 0x3e	; 62
 7ce:	dc 01       	movw	r26, r24
	uint8_t tmp[4];
	tmp[0] = ((uint8_t*)data)[ 0];
 7d0:	8c 91       	ld	r24, X
 7d2:	89 83       	std	Y+1, r24	; 0x01
	tmp[1] = ((uint8_t*)data)[ 4];
 7d4:	14 96       	adiw	r26, 0x04	; 4
 7d6:	8c 91       	ld	r24, X
 7d8:	14 97       	sbiw	r26, 0x04	; 4
 7da:	8a 83       	std	Y+2, r24	; 0x02
	tmp[2] = ((uint8_t*)data)[ 8];
 7dc:	18 96       	adiw	r26, 0x08	; 8
 7de:	8c 91       	ld	r24, X
 7e0:	18 97       	sbiw	r26, 0x08	; 8
 7e2:	8b 83       	std	Y+3, r24	; 0x03
	tmp[3] = ((uint8_t*)data)[12];
 7e4:	1c 96       	adiw	r26, 0x0c	; 12
 7e6:	8c 91       	ld	r24, X
 7e8:	1c 97       	sbiw	r26, 0x0c	; 12
 7ea:	8c 83       	std	Y+4, r24	; 0x04
	((uint8_t*)data)[ 0] = tmp[(shift+0)&3];
 7ec:	86 2f       	mov	r24, r22
 7ee:	83 70       	andi	r24, 0x03	; 3
 7f0:	e1 e0       	ldi	r30, 0x01	; 1
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	ec 0f       	add	r30, r28
 7f6:	fd 1f       	adc	r31, r29
 7f8:	e8 0f       	add	r30, r24
 7fa:	f1 1d       	adc	r31, r1
 7fc:	80 81       	ld	r24, Z
 7fe:	8c 93       	st	X, r24
	((uint8_t*)data)[ 4] = tmp[(shift+1)&3];
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	fb 01       	movw	r30, r22
 804:	31 96       	adiw	r30, 0x01	; 1
 806:	e3 70       	andi	r30, 0x03	; 3
 808:	ff 27       	eor	r31, r31
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	8c 0f       	add	r24, r28
 810:	9d 1f       	adc	r25, r29
 812:	e8 0f       	add	r30, r24
 814:	f9 1f       	adc	r31, r25
 816:	80 81       	ld	r24, Z
 818:	14 96       	adiw	r26, 0x04	; 4
 81a:	8c 93       	st	X, r24
 81c:	14 97       	sbiw	r26, 0x04	; 4
	((uint8_t*)data)[ 8] = tmp[(shift+2)&3];
 81e:	fb 01       	movw	r30, r22
 820:	32 96       	adiw	r30, 0x02	; 2
 822:	e3 70       	andi	r30, 0x03	; 3
 824:	ff 27       	eor	r31, r31
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	8c 0f       	add	r24, r28
 82c:	9d 1f       	adc	r25, r29
 82e:	e8 0f       	add	r30, r24
 830:	f9 1f       	adc	r31, r25
 832:	80 81       	ld	r24, Z
 834:	18 96       	adiw	r26, 0x08	; 8
 836:	8c 93       	st	X, r24
 838:	18 97       	sbiw	r26, 0x08	; 8
	((uint8_t*)data)[12] = tmp[(shift+3)&3];
 83a:	fb 01       	movw	r30, r22
 83c:	33 96       	adiw	r30, 0x03	; 3
 83e:	e3 70       	andi	r30, 0x03	; 3
 840:	ff 27       	eor	r31, r31
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	8c 0f       	add	r24, r28
 848:	9d 1f       	adc	r25, r29
 84a:	e8 0f       	add	r30, r24
 84c:	f9 1f       	adc	r31, r25
 84e:	80 81       	ld	r24, Z
 850:	1c 96       	adiw	r26, 0x0c	; 12
 852:	8c 93       	st	X, r24
}
 854:	24 96       	adiw	r28, 0x04	; 4
 856:	cd bf       	out	0x3d, r28	; 61
 858:	de bf       	out	0x3e, r29	; 62
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <aes_encrypt_core>:
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds){
 860:	2f 92       	push	r2
 862:	3f 92       	push	r3
 864:	4f 92       	push	r4
 866:	5f 92       	push	r5
 868:	6f 92       	push	r6
 86a:	7f 92       	push	r7
 86c:	8f 92       	push	r8
 86e:	9f 92       	push	r9
 870:	af 92       	push	r10
 872:	bf 92       	push	r11
 874:	cf 92       	push	r12
 876:	df 92       	push	r13
 878:	ef 92       	push	r14
 87a:	ff 92       	push	r15
 87c:	0f 93       	push	r16
 87e:	1f 93       	push	r17
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	cd b7       	in	r28, 0x3d	; 61
 886:	de b7       	in	r29, 0x3e	; 62
 888:	63 97       	sbiw	r28, 0x13	; 19
 88a:	cd bf       	out	0x3d, r28	; 61
 88c:	de bf       	out	0x3e, r29	; 62
 88e:	7c 01       	movw	r14, r24
 890:	5b 01       	movw	r10, r22
 892:	24 2e       	mov	r2, r20
 894:	db 01       	movw	r26, r22
 896:	8a 8b       	std	Y+18, r24	; 0x12
 898:	9b 8b       	std	Y+19, r25	; 0x13
 89a:	2c 01       	movw	r4, r24
 89c:	20 e1       	ldi	r18, 0x10	; 16
 89e:	42 0e       	add	r4, r18
 8a0:	51 1c       	adc	r5, r1
 8a2:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
 8a4:	8d 91       	ld	r24, X+
 8a6:	90 81       	ld	r25, Z
 8a8:	89 27       	eor	r24, r25
 8aa:	81 93       	st	Z+, r24
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds){
	uint8_t i;
	for(i=0; i<16; ++i){
 8ac:	e4 15       	cp	r30, r4
 8ae:	f5 05       	cpc	r31, r5
 8b0:	c9 f7       	brne	.-14     	; 0x8a4 <aes_encrypt_core+0x44>
 8b2:	45 01       	movw	r8, r10
 8b4:	30 e1       	ldi	r19, 0x10	; 16
 8b6:	83 0e       	add	r8, r19
 8b8:	91 1c       	adc	r9, r1
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	89 8b       	std	Y+17, r24	; 0x11
 8be:	3e 01       	movw	r6, r28
 8c0:	a1 e1       	ldi	r26, 0x11	; 17
 8c2:	6a 0e       	add	r6, r26
 8c4:	71 1c       	adc	r7, r1
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
 8c6:	21 e0       	ldi	r18, 0x01	; 1
 8c8:	22 15       	cp	r18, r2
 8ca:	08 f0       	brcs	.+2      	; 0x8ce <aes_encrypt_core+0x6e>
 8cc:	81 c0       	rjmp	.+258    	; 0x9d0 <aes_encrypt_core+0x170>
 8ce:	8e 01       	movw	r16, r28
 8d0:	0f 5f       	subi	r16, 0xFF	; 255
 8d2:	1f 4f       	sbci	r17, 0xFF	; 255
 8d4:	d8 01       	movw	r26, r16
 8d6:	c7 01       	movw	r24, r14
void aes_enc_round(aes_cipher_state_t* state, const aes_roundkey_t* k){
	uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
		tmp[i] = pgm_read_byte(aes_sbox+state->s[i]);
 8d8:	fc 01       	movw	r30, r24
 8da:	21 91       	ld	r18, Z+
 8dc:	cf 01       	movw	r24, r30
 8de:	e2 2f       	mov	r30, r18
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	ea 51       	subi	r30, 0x1A	; 26
 8e4:	fe 4f       	sbci	r31, 0xFE	; 254
 8e6:	e4 91       	lpm	r30, Z
 8e8:	ed 93       	st	X+, r30
static
void aes_enc_round(aes_cipher_state_t* state, const aes_roundkey_t* k){
	uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
 8ea:	a6 15       	cp	r26, r6
 8ec:	b7 05       	cpc	r27, r7
 8ee:	a1 f7       	brne	.-24     	; 0x8d8 <aes_encrypt_core+0x78>
		tmp[i] = pgm_read_byte(aes_sbox+state->s[i]);
	}
	/* shiftRows */
	aes_shiftcol(tmp+1, 1);
 8f0:	61 e0       	ldi	r22, 0x01	; 1
 8f2:	ce 01       	movw	r24, r28
 8f4:	02 96       	adiw	r24, 0x02	; 2
 8f6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <aes_shiftcol>
	aes_shiftcol(tmp+2, 2);
 8fa:	62 e0       	ldi	r22, 0x02	; 2
 8fc:	ce 01       	movw	r24, r28
 8fe:	03 96       	adiw	r24, 0x03	; 3
 900:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <aes_shiftcol>
	aes_shiftcol(tmp+3, 3);
 904:	63 e0       	ldi	r22, 0x03	; 3
 906:	ce 01       	movw	r24, r28
 908:	04 96       	adiw	r24, 0x04	; 4
 90a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <aes_shiftcol>
 90e:	67 01       	movw	r12, r14
	/* mixColums */
	for(i=0; i<4; ++i){
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
 910:	d8 01       	movw	r26, r16
 912:	6c 91       	ld	r22, X
 914:	11 96       	adiw	r26, 0x01	; 1
 916:	8c 91       	ld	r24, X
 918:	11 97       	sbiw	r26, 0x01	; 1
 91a:	68 27       	eor	r22, r24
 91c:	12 96       	adiw	r26, 0x02	; 2
 91e:	3c 90       	ld	r3, X
 920:	12 97       	sbiw	r26, 0x02	; 2
 922:	13 96       	adiw	r26, 0x03	; 3
 924:	8c 91       	ld	r24, X
 926:	38 26       	eor	r3, r24
 928:	36 26       	eor	r3, r22
		state->s[4*i+0] =
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
 92a:	4b e1       	ldi	r20, 0x1B	; 27
 92c:	82 e0       	ldi	r24, 0x02	; 2
 92e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <gf256mul>
	aes_shiftcol(tmp+2, 2);
	aes_shiftcol(tmp+3, 3);
	/* mixColums */
	for(i=0; i<4; ++i){
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
		state->s[4*i+0] =
 932:	f8 01       	movw	r30, r16
 934:	90 81       	ld	r25, Z
 936:	89 27       	eor	r24, r25
 938:	83 25       	eor	r24, r3
 93a:	d6 01       	movw	r26, r12
 93c:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
			^ tmp[4*i+0]
			^ t;
		state->s[4*i+1] =
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
 93e:	61 81       	ldd	r22, Z+1	; 0x01
 940:	82 81       	ldd	r24, Z+2	; 0x02
 942:	68 27       	eor	r22, r24
 944:	4b e1       	ldi	r20, 0x1B	; 27
 946:	82 e0       	ldi	r24, 0x02	; 2
 948:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <gf256mul>
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
		state->s[4*i+0] =
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
			^ tmp[4*i+0]
			^ t;
		state->s[4*i+1] =
 94c:	f8 01       	movw	r30, r16
 94e:	91 81       	ldd	r25, Z+1	; 0x01
 950:	89 27       	eor	r24, r25
 952:	83 25       	eor	r24, r3
 954:	d6 01       	movw	r26, r12
 956:	11 96       	adiw	r26, 0x01	; 1
 958:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
			^ tmp[4*i+1]
			^ t;
		state->s[4*i+2] =
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
 95a:	62 81       	ldd	r22, Z+2	; 0x02
 95c:	83 81       	ldd	r24, Z+3	; 0x03
 95e:	68 27       	eor	r22, r24
 960:	4b e1       	ldi	r20, 0x1B	; 27
 962:	82 e0       	ldi	r24, 0x02	; 2
 964:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <gf256mul>
			^ t;
		state->s[4*i+1] =
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
			^ tmp[4*i+1]
			^ t;
		state->s[4*i+2] =
 968:	f8 01       	movw	r30, r16
 96a:	92 81       	ldd	r25, Z+2	; 0x02
 96c:	89 27       	eor	r24, r25
 96e:	83 25       	eor	r24, r3
 970:	d6 01       	movw	r26, r12
 972:	12 96       	adiw	r26, 0x02	; 2
 974:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
			^ tmp[4*i+2]
			^ t;
		state->s[4*i+3] =
			  GF256MUL_2(tmp[4*i+3]^tmp[4*i+0])
 976:	63 81       	ldd	r22, Z+3	; 0x03
 978:	80 81       	ld	r24, Z
 97a:	68 27       	eor	r22, r24
 97c:	4b e1       	ldi	r20, 0x1B	; 27
 97e:	82 e0       	ldi	r24, 0x02	; 2
 980:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <gf256mul>
			^ t;
		state->s[4*i+2] =
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
			^ tmp[4*i+2]
			^ t;
		state->s[4*i+3] =
 984:	f8 01       	movw	r30, r16
 986:	93 81       	ldd	r25, Z+3	; 0x03
 988:	89 27       	eor	r24, r25
 98a:	38 26       	eor	r3, r24
 98c:	d6 01       	movw	r26, r12
 98e:	13 96       	adiw	r26, 0x03	; 3
 990:	3c 92       	st	X, r3
 992:	0c 5f       	subi	r16, 0xFC	; 252
 994:	1f 4f       	sbci	r17, 0xFF	; 255
 996:	b4 e0       	ldi	r27, 0x04	; 4
 998:	cb 0e       	add	r12, r27
 99a:	d1 1c       	adc	r13, r1
	/* shiftRows */
	aes_shiftcol(tmp+1, 1);
	aes_shiftcol(tmp+2, 2);
	aes_shiftcol(tmp+3, 3);
	/* mixColums */
	for(i=0; i<4; ++i){
 99c:	06 15       	cp	r16, r6
 99e:	17 05       	cpc	r17, r7
 9a0:	09 f0       	breq	.+2      	; 0x9a4 <aes_encrypt_core+0x144>
 9a2:	b6 cf       	rjmp	.-148    	; 0x910 <aes_encrypt_core+0xb0>
 9a4:	f7 01       	movw	r30, r14
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	90 e0       	ldi	r25, 0x00	; 0
			^ t;
	}

	/* addKey */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
 9aa:	d4 01       	movw	r26, r8
 9ac:	a8 0f       	add	r26, r24
 9ae:	b9 1f       	adc	r27, r25
 9b0:	30 81       	ld	r19, Z
 9b2:	2c 91       	ld	r18, X
 9b4:	23 27       	eor	r18, r19
 9b6:	21 93       	st	Z+, r18
 9b8:	01 96       	adiw	r24, 0x01	; 1
			^ tmp[4*i+3]
			^ t;
	}

	/* addKey */
	for(i=0; i<16; ++i){
 9ba:	80 31       	cpi	r24, 0x10	; 16
 9bc:	91 05       	cpc	r25, r1
 9be:	a9 f7       	brne	.-22     	; 0x9aa <aes_encrypt_core+0x14a>
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
		aes_enc_round(state, &(ks->key[i]));
		++i;
 9c0:	e9 89       	ldd	r30, Y+17	; 0x11
 9c2:	ef 5f       	subi	r30, 0xFF	; 255
 9c4:	e9 8b       	std	Y+17, r30	; 0x11
	uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
 9c6:	2a 94       	dec	r2
 9c8:	f0 e1       	ldi	r31, 0x10	; 16
 9ca:	8f 0e       	add	r8, r31
 9cc:	91 1c       	adc	r9, r1
 9ce:	7b cf       	rjmp	.-266    	; 0x8c6 <aes_encrypt_core+0x66>
		aes_enc_round(state, &(ks->key[i]));
		++i;
	}
	aes_enc_lastround(state, &(ks->key[i]));
 9d0:	d7 01       	movw	r26, r14
static
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
		state->s[i] = pgm_read_byte(aes_sbox+state->s[i]);
 9d2:	ec 91       	ld	r30, X
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	ea 51       	subi	r30, 0x1A	; 26
 9d8:	fe 4f       	sbci	r31, 0xFE	; 254
 9da:	e4 91       	lpm	r30, Z
 9dc:	ed 93       	st	X+, r30

static
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
 9de:	a4 15       	cp	r26, r4
 9e0:	b5 05       	cpc	r27, r5
 9e2:	b9 f7       	brne	.-18     	; 0x9d2 <aes_encrypt_core+0x172>
		state->s[i] = pgm_read_byte(aes_sbox+state->s[i]);
	}
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
 9e4:	61 e0       	ldi	r22, 0x01	; 1
 9e6:	c7 01       	movw	r24, r14
 9e8:	01 96       	adiw	r24, 0x01	; 1
 9ea:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <aes_shiftcol>
	aes_shiftcol(state->s+2, 2);
 9ee:	62 e0       	ldi	r22, 0x02	; 2
 9f0:	c7 01       	movw	r24, r14
 9f2:	02 96       	adiw	r24, 0x02	; 2
 9f4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <aes_shiftcol>
	aes_shiftcol(state->s+3, 3);
 9f8:	63 e0       	ldi	r22, 0x03	; 3
 9fa:	c7 01       	movw	r24, r14
 9fc:	03 96       	adiw	r24, 0x03	; 3
 9fe:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <aes_shiftcol>
 a02:	a9 89       	ldd	r26, Y+17	; 0x11
 a04:	30 e1       	ldi	r19, 0x10	; 16
 a06:	a3 9f       	mul	r26, r19
 a08:	c0 01       	movw	r24, r0
 a0a:	11 24       	eor	r1, r1
 a0c:	20 e0       	ldi	r18, 0x00	; 0
 a0e:	30 e0       	ldi	r19, 0x00	; 0
	/* keyAdd */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
 a10:	fc 01       	movw	r30, r24
 a12:	e2 0f       	add	r30, r18
 a14:	f3 1f       	adc	r31, r19
 a16:	ea 0d       	add	r30, r10
 a18:	fb 1d       	adc	r31, r11
 a1a:	aa 89       	ldd	r26, Y+18	; 0x12
 a1c:	bb 89       	ldd	r27, Y+19	; 0x13
 a1e:	5c 91       	ld	r21, X
 a20:	40 81       	ld	r20, Z
 a22:	45 27       	eor	r20, r21
 a24:	4d 93       	st	X+, r20
 a26:	aa 8b       	std	Y+18, r26	; 0x12
 a28:	bb 8b       	std	Y+19, r27	; 0x13
 a2a:	2f 5f       	subi	r18, 0xFF	; 255
 a2c:	3f 4f       	sbci	r19, 0xFF	; 255
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
	aes_shiftcol(state->s+2, 2);
	aes_shiftcol(state->s+3, 3);
	/* keyAdd */
	for(i=0; i<16; ++i){
 a2e:	20 31       	cpi	r18, 0x10	; 16
 a30:	31 05       	cpc	r19, r1
 a32:	71 f7       	brne	.-36     	; 0xa10 <aes_encrypt_core+0x1b0>
	for(;rounds>1;--rounds){
		aes_enc_round(state, &(ks->key[i]));
		++i;
	}
	aes_enc_lastround(state, &(ks->key[i]));
}
 a34:	63 96       	adiw	r28, 0x13	; 19
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	de bf       	out	0x3e, r29	; 62
 a3a:	df 91       	pop	r29
 a3c:	cf 91       	pop	r28
 a3e:	1f 91       	pop	r17
 a40:	0f 91       	pop	r16
 a42:	ff 90       	pop	r15
 a44:	ef 90       	pop	r14
 a46:	df 90       	pop	r13
 a48:	cf 90       	pop	r12
 a4a:	bf 90       	pop	r11
 a4c:	af 90       	pop	r10
 a4e:	9f 90       	pop	r9
 a50:	8f 90       	pop	r8
 a52:	7f 90       	pop	r7
 a54:	6f 90       	pop	r6
 a56:	5f 90       	pop	r5
 a58:	4f 90       	pop	r4
 a5a:	3f 90       	pop	r3
 a5c:	2f 90       	pop	r2
 a5e:	08 95       	ret

00000a60 <aes_init>:

const uint8_t rc_tab[] PROGMEM = { 0x01, 0x02, 0x04, 0x08,
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
 a60:	8f 92       	push	r8
 a62:	9f 92       	push	r9
 a64:	af 92       	push	r10
 a66:	bf 92       	push	r11
 a68:	cf 92       	push	r12
 a6a:	df 92       	push	r13
 a6c:	ef 92       	push	r14
 a6e:	ff 92       	push	r15
 a70:	0f 93       	push	r16
 a72:	1f 93       	push	r17
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	ea 01       	movw	r28, r20
	uint8_t rc=0;
	union {
		uint32_t v32;
		uint8_t  v8[4];
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
 a7a:	6b 01       	movw	r12, r22
 a7c:	f5 e0       	ldi	r31, 0x05	; 5
 a7e:	d6 94       	lsr	r13
 a80:	c7 94       	ror	r12
 a82:	fa 95       	dec	r31
 a84:	e1 f7       	brne	.-8      	; 0xa7e <aes_init+0x1e>
 a86:	ec 2c       	mov	r14, r12
	hi=4*(nk+6+1);
 a88:	86 01       	movw	r16, r12
 a8a:	11 27       	eor	r17, r17
 a8c:	98 01       	movw	r18, r16
 a8e:	29 5f       	subi	r18, 0xF9	; 249
 a90:	3f 4f       	sbci	r19, 0xFF	; 255
 a92:	f2 2e       	mov	r15, r18
 a94:	ff 0c       	add	r15, r15
 a96:	ff 0c       	add	r15, r15
	memcpy(ctx, key, keysize_b/8);
 a98:	ab 01       	movw	r20, r22
 a9a:	a3 e0       	ldi	r26, 0x03	; 3
 a9c:	56 95       	lsr	r21
 a9e:	47 95       	ror	r20
 aa0:	aa 95       	dec	r26
 aa2:	e1 f7       	brne	.-8      	; 0xa9c <aes_init+0x3c>
 aa4:	bc 01       	movw	r22, r24
 aa6:	ce 01       	movw	r24, r28
 aa8:	0e 94 46 06 	call	0xc8c	; 0xc8c <memcpy>
	next_nk = nk;
 aac:	dc 2c       	mov	r13, r12
	for(i=nk;i<hi;++i){
 aae:	2c 2d       	mov	r18, r12
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
	uint8_t hi,i,nk, next_nk;
	uint8_t rc=0;
 ab0:	30 e0       	ldi	r19, 0x00	; 0
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
 ab2:	2f 15       	cp	r18, r15
 ab4:	08 f0       	brcs	.+2      	; 0xab8 <aes_init+0x58>
 ab6:	6e c0       	rjmp	.+220    	; 0xb94 <aes_init+0x134>
		tmp.v32 = ((uint32_t*)(ctx->key[0].ks))[i-1];
 ab8:	62 2f       	mov	r22, r18
 aba:	70 e0       	ldi	r23, 0x00	; 0
 abc:	ab 01       	movw	r20, r22
 abe:	41 50       	subi	r20, 0x01	; 1
 ac0:	50 4c       	sbci	r21, 0xC0	; 192
 ac2:	44 0f       	add	r20, r20
 ac4:	55 1f       	adc	r21, r21
 ac6:	44 0f       	add	r20, r20
 ac8:	55 1f       	adc	r21, r21
 aca:	4c 0f       	add	r20, r28
 acc:	5d 1f       	adc	r21, r29
 ace:	fa 01       	movw	r30, r20
 ad0:	80 81       	ld	r24, Z
 ad2:	91 81       	ldd	r25, Z+1	; 0x01
 ad4:	a2 81       	ldd	r26, Z+2	; 0x02
 ad6:	b3 81       	ldd	r27, Z+3	; 0x03
		if(i!=next_nk){
 ad8:	2d 15       	cp	r18, r13
 ada:	09 f1       	breq	.+66     	; 0xb1e <aes_init+0xbe>
			if(nk==8 && i%8==4){
 adc:	f8 e0       	ldi	r31, 0x08	; 8
 ade:	ef 12       	cpse	r14, r31
 ae0:	41 c0       	rjmp	.+130    	; 0xb64 <aes_init+0x104>
 ae2:	e2 2f       	mov	r30, r18
 ae4:	e7 70       	andi	r30, 0x07	; 7
 ae6:	e4 30       	cpi	r30, 0x04	; 4
 ae8:	09 f0       	breq	.+2      	; 0xaec <aes_init+0x8c>
 aea:	3c c0       	rjmp	.+120    	; 0xb64 <aes_init+0x104>
				tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
 aec:	e8 2f       	mov	r30, r24
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	ea 51       	subi	r30, 0x1A	; 26
 af2:	fe 4f       	sbci	r31, 0xFE	; 254
 af4:	e4 91       	lpm	r30, Z
 af6:	8e 2f       	mov	r24, r30
				tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
 af8:	e9 2f       	mov	r30, r25
 afa:	f0 e0       	ldi	r31, 0x00	; 0
 afc:	ea 51       	subi	r30, 0x1A	; 26
 afe:	fe 4f       	sbci	r31, 0xFE	; 254
 b00:	e4 91       	lpm	r30, Z
 b02:	9e 2f       	mov	r25, r30
				tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
 b04:	ea 2f       	mov	r30, r26
 b06:	f0 e0       	ldi	r31, 0x00	; 0
 b08:	ea 51       	subi	r30, 0x1A	; 26
 b0a:	fe 4f       	sbci	r31, 0xFE	; 254
 b0c:	e4 91       	lpm	r30, Z
 b0e:	ae 2f       	mov	r26, r30
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
 b10:	eb 2f       	mov	r30, r27
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	ea 51       	subi	r30, 0x1A	; 26
 b16:	fe 4f       	sbci	r31, 0xFE	; 254
 b18:	e4 91       	lpm	r30, Z
 b1a:	be 2f       	mov	r27, r30
 b1c:	23 c0       	rjmp	.+70     	; 0xb64 <aes_init+0x104>
			}
		} else {
			next_nk += nk;
 b1e:	d2 2e       	mov	r13, r18
 b20:	de 0c       	add	r13, r14
#include <avr/pgmspace.h>

static
void aes_rotword(void* a){
	uint8_t t;
	t=((uint8_t*)a)[0];
 b22:	c8 2e       	mov	r12, r24
	((uint8_t*)a)[0] = ((uint8_t*)a)[1];
	((uint8_t*)a)[1] = ((uint8_t*)a)[2];
	((uint8_t*)a)[2] = ((uint8_t*)a)[3];
 b24:	ab 2e       	mov	r10, r27
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
			}
		} else {
			next_nk += nk;
			aes_rotword(&(tmp.v32));
			tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
 b26:	e9 2f       	mov	r30, r25
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	ea 51       	subi	r30, 0x1A	; 26
 b2c:	fe 4f       	sbci	r31, 0xFE	; 254
 b2e:	b4 90       	lpm	r11, Z
			tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
 b30:	ea 2f       	mov	r30, r26
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	ea 51       	subi	r30, 0x1A	; 26
 b36:	fe 4f       	sbci	r31, 0xFE	; 254
 b38:	e4 91       	lpm	r30, Z
 b3a:	9e 2f       	mov	r25, r30
			tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
 b3c:	ea 2d       	mov	r30, r10
 b3e:	f0 e0       	ldi	r31, 0x00	; 0
 b40:	ea 51       	subi	r30, 0x1A	; 26
 b42:	fe 4f       	sbci	r31, 0xFE	; 254
 b44:	e4 91       	lpm	r30, Z
 b46:	ae 2f       	mov	r26, r30
			tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
 b48:	ec 2d       	mov	r30, r12
 b4a:	f0 e0       	ldi	r31, 0x00	; 0
 b4c:	ea 51       	subi	r30, 0x1A	; 26
 b4e:	fe 4f       	sbci	r31, 0xFE	; 254
 b50:	e4 91       	lpm	r30, Z
 b52:	be 2f       	mov	r27, r30
			tmp.v8[0] ^= pgm_read_byte(rc_tab+rc);
 b54:	e3 2f       	mov	r30, r19
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	e4 52       	subi	r30, 0x24	; 36
 b5a:	fe 4f       	sbci	r31, 0xFE	; 254
 b5c:	e4 91       	lpm	r30, Z
 b5e:	8b 2d       	mov	r24, r11
 b60:	8e 27       	eor	r24, r30
			rc++;
 b62:	3f 5f       	subi	r19, 0xFF	; 255
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
 b64:	fb 01       	movw	r30, r22
 b66:	e0 1b       	sub	r30, r16
 b68:	f1 0b       	sbc	r31, r17
 b6a:	ee 0f       	add	r30, r30
 b6c:	ff 1f       	adc	r31, r31
 b6e:	ee 0f       	add	r30, r30
 b70:	ff 1f       	adc	r31, r31
 b72:	ec 0f       	add	r30, r28
 b74:	fd 1f       	adc	r31, r29
 b76:	80 80       	ld	r8, Z
 b78:	91 80       	ldd	r9, Z+1	; 0x01
 b7a:	a2 80       	ldd	r10, Z+2	; 0x02
 b7c:	b3 80       	ldd	r11, Z+3	; 0x03
 b7e:	88 25       	eor	r24, r8
 b80:	99 25       	eor	r25, r9
 b82:	aa 25       	eor	r26, r10
 b84:	bb 25       	eor	r27, r11
 b86:	fa 01       	movw	r30, r20
 b88:	84 83       	std	Z+4, r24	; 0x04
 b8a:	95 83       	std	Z+5, r25	; 0x05
 b8c:	a6 83       	std	Z+6, r26	; 0x06
 b8e:	b7 83       	std	Z+7, r27	; 0x07
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
 b90:	2f 5f       	subi	r18, 0xFF	; 255
 b92:	8f cf       	rjmp	.-226    	; 0xab2 <aes_init+0x52>
			rc++;
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
		                                   ^ tmp.v32;
	}
}
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	1f 91       	pop	r17
 b9a:	0f 91       	pop	r16
 b9c:	ff 90       	pop	r15
 b9e:	ef 90       	pop	r14
 ba0:	df 90       	pop	r13
 ba2:	cf 90       	pop	r12
 ba4:	bf 90       	pop	r11
 ba6:	af 90       	pop	r10
 ba8:	9f 90       	pop	r9
 baa:	8f 90       	pop	r8
 bac:	08 95       	ret

00000bae <aes128_init>:

void aes128_init(const void* key, aes128_ctx_t* ctx){
 bae:	ab 01       	movw	r20, r22
	aes_init(key, 128, (aes_genctx_t*)ctx);
 bb0:	60 e8       	ldi	r22, 0x80	; 128
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	0c 94 30 05 	jmp	0xa60	; 0xa60 <aes_init>

00000bb8 <aes192_init>:
}

void aes192_init(const void* key, aes192_ctx_t* ctx){
 bb8:	ab 01       	movw	r20, r22
	aes_init(key, 192, (aes_genctx_t*)ctx);
 bba:	60 ec       	ldi	r22, 0xC0	; 192
 bbc:	70 e0       	ldi	r23, 0x00	; 0
 bbe:	0c 94 30 05 	jmp	0xa60	; 0xa60 <aes_init>

00000bc2 <aes256_init>:
}

void aes256_init(const void* key, aes256_ctx_t* ctx){
 bc2:	ab 01       	movw	r20, r22
	aes_init(key, 256, (aes_genctx_t*)ctx);
 bc4:	60 e0       	ldi	r22, 0x00	; 0
 bc6:	71 e0       	ldi	r23, 0x01	; 1
 bc8:	0c 94 30 05 	jmp	0xa60	; 0xa60 <aes_init>

00000bcc <aes128_enc>:

#include "aes.h"
#include "aes_enc.h"

void aes128_enc(void* buffer, aes128_ctx_t* ctx){
	aes_encrypt_core(buffer, (aes_genctx_t*)ctx, 10);
 bcc:	4a e0       	ldi	r20, 0x0A	; 10
 bce:	0c 94 30 04 	jmp	0x860	; 0x860 <aes_encrypt_core>

00000bd2 <gf256mul>:
P = 24
.global gf256mul

#ifdef OPTIMIZE_SMALL_A
gf256mul:
	mov A, r24
 bd2:	78 2f       	mov	r23, r24
	clr r24
 bd4:	88 27       	eor	r24, r24
1:	
	lsr A
 bd6:	76 95       	lsr	r23
	breq 4f
 bd8:	31 f0       	breq	.+12     	; 0xbe6 <gf256mul+0x14>
	brcc 2f
 bda:	08 f4       	brcc	.+2      	; 0xbde <gf256mul+0xc>
	eor P, B
 bdc:	86 27       	eor	r24, r22
2:
	lsl B
 bde:	66 0f       	add	r22, r22
	brcc 3f
 be0:	08 f4       	brcc	.+2      	; 0xbe4 <gf256mul+0x12>
	eor B, r20	
 be2:	64 27       	eor	r22, r20
3:
	rjmp 1b
 be4:	f8 cf       	rjmp	.-16     	; 0xbd6 <gf256mul+0x4>
4:
	brcc 2f
 be6:	08 f4       	brcc	.+2      	; 0xbea <gf256mul+0x18>
	eor P, B
 be8:	86 27       	eor	r24, r22
2:
	ret
 bea:	08 95       	ret

00000bec <main>:
    // Reset key here if needed
	return 0x00;
}

int main(void)
{
 bec:	cf 93       	push	r28
 bee:	df 93       	push	r29
 bf0:	cd b7       	in	r28, 0x3d	; 61
 bf2:	de b7       	in	r29, 0x3e	; 62
 bf4:	60 97       	sbiw	r28, 0x10	; 16
 bf6:	cd bf       	out	0x3d, r28	; 61
 bf8:	de bf       	out	0x3e, r29	; 62
	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 bfa:	80 e1       	ldi	r24, 0x10	; 16
 bfc:	e0 e0       	ldi	r30, 0x00	; 0
 bfe:	f0 e2       	ldi	r31, 0x20	; 32
 c00:	de 01       	movw	r26, r28
 c02:	11 96       	adiw	r26, 0x01	; 1
 c04:	01 90       	ld	r0, Z+
 c06:	0d 92       	st	X+, r0
 c08:	8a 95       	dec	r24
 c0a:	e1 f7       	brne	.-8      	; 0xc04 <main+0x18>

    platform_init();
 c0c:	0e 94 c1 03 	call	0x782	; 0x782 <platform_init>
    init_uart();
 c10:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <init_uart0>
    trigger_setup();
 c14:	81 e0       	ldi	r24, 0x01	; 1
 c16:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>

	aes_indep_init();
 c1a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <aes_indep_init>
	aes_indep_key(tmp);
 c1e:	ce 01       	movw	r24, r28
 c20:	01 96       	adiw	r24, 0x01	; 1
 c22:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <aes_indep_key>

    /* Uncomment this to get a HELLO message for debug */

    putch('h');
 c26:	88 e6       	ldi	r24, 0x68	; 104
 c28:	0e 94 2d 03 	call	0x65a	; 0x65a <output_ch_0>
    putch('e');
 c2c:	85 e6       	ldi	r24, 0x65	; 101
 c2e:	0e 94 2d 03 	call	0x65a	; 0x65a <output_ch_0>
    putch('l');
 c32:	8c e6       	ldi	r24, 0x6C	; 108
 c34:	0e 94 2d 03 	call	0x65a	; 0x65a <output_ch_0>
    putch('l');
 c38:	8c e6       	ldi	r24, 0x6C	; 108
 c3a:	0e 94 2d 03 	call	0x65a	; 0x65a <output_ch_0>
    putch('o');
 c3e:	8f e6       	ldi	r24, 0x6F	; 111
 c40:	0e 94 2d 03 	call	0x65a	; 0x65a <output_ch_0>
    putch('\n');
 c44:	8a e0       	ldi	r24, 0x0A	; 10
 c46:	0e 94 2d 03 	call	0x65a	; 0x65a <output_ch_0>

	simpleserial_init();
 c4a:	0e 94 27 02 	call	0x44e	; 0x44e <simpleserial_init>
    simpleserial_addcmd('k', 16, get_key);
 c4e:	4c e9       	ldi	r20, 0x9C	; 156
 c50:	51 e0       	ldi	r21, 0x01	; 1
 c52:	60 e1       	ldi	r22, 0x10	; 16
 c54:	70 e0       	ldi	r23, 0x00	; 0
 c56:	8b e6       	ldi	r24, 0x6B	; 107
 c58:	0e 94 04 02 	call	0x408	; 0x408 <simpleserial_addcmd>
    simpleserial_addcmd('p', 16,  get_pt);
 c5c:	40 ea       	ldi	r20, 0xA0	; 160
 c5e:	51 e0       	ldi	r21, 0x01	; 1
 c60:	60 e1       	ldi	r22, 0x10	; 16
 c62:	70 e0       	ldi	r23, 0x00	; 0
 c64:	80 e7       	ldi	r24, 0x70	; 112
 c66:	0e 94 04 02 	call	0x408	; 0x408 <simpleserial_addcmd>
    simpleserial_addcmd('x',  0,   reset);
 c6a:	46 e9       	ldi	r20, 0x96	; 150
 c6c:	51 e0       	ldi	r21, 0x01	; 1
 c6e:	60 e0       	ldi	r22, 0x00	; 0
 c70:	70 e0       	ldi	r23, 0x00	; 0
 c72:	88 e7       	ldi	r24, 0x78	; 120
 c74:	0e 94 04 02 	call	0x408	; 0x408 <simpleserial_addcmd>
    simpleserial_addcmd('m', 18, get_mask);
 c78:	48 e9       	ldi	r20, 0x98	; 152
 c7a:	51 e0       	ldi	r21, 0x01	; 1
 c7c:	62 e1       	ldi	r22, 0x12	; 18
 c7e:	70 e0       	ldi	r23, 0x00	; 0
 c80:	8d e6       	ldi	r24, 0x6D	; 109
 c82:	0e 94 04 02 	call	0x408	; 0x408 <simpleserial_addcmd>
    while(1)
        simpleserial_get();
 c86:	0e 94 62 02 	call	0x4c4	; 0x4c4 <simpleserial_get>
 c8a:	fd cf       	rjmp	.-6      	; 0xc86 <main+0x9a>

00000c8c <memcpy>:
 c8c:	fb 01       	movw	r30, r22
 c8e:	dc 01       	movw	r26, r24
 c90:	02 c0       	rjmp	.+4      	; 0xc96 <memcpy+0xa>
 c92:	01 90       	ld	r0, Z+
 c94:	0d 92       	st	X+, r0
 c96:	41 50       	subi	r20, 0x01	; 1
 c98:	50 40       	sbci	r21, 0x00	; 0
 c9a:	d8 f7       	brcc	.-10     	; 0xc92 <memcpy+0x6>
 c9c:	08 95       	ret

00000c9e <_exit>:
 c9e:	f8 94       	cli

00000ca0 <__stop_program>:
 ca0:	ff cf       	rjmp	.-2      	; 0xca0 <__stop_program>
