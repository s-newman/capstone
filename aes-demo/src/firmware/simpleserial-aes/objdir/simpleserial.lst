   1               		.file	"simpleserial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               	.global	check_version
  14               	check_version:
  15               	.LFB12:
  16               		.file 1 ".././simpleserial/simpleserial.c"
   1:.././simpleserial/simpleserial.c **** // simpleserial.c
   2:.././simpleserial/simpleserial.c **** 
   3:.././simpleserial/simpleserial.c **** #include "simpleserial.h"
   4:.././simpleserial/simpleserial.c **** #include <stdint.h>
   5:.././simpleserial/simpleserial.c **** #include "hal.h"
   6:.././simpleserial/simpleserial.c **** 
   7:.././simpleserial/simpleserial.c **** typedef struct ss_cmd
   8:.././simpleserial/simpleserial.c **** {
   9:.././simpleserial/simpleserial.c **** 	char c;
  10:.././simpleserial/simpleserial.c **** 	unsigned int len;
  11:.././simpleserial/simpleserial.c **** 	uint8_t (*fp)(uint8_t*);
  12:.././simpleserial/simpleserial.c **** } ss_cmd;
  13:.././simpleserial/simpleserial.c **** 
  14:.././simpleserial/simpleserial.c **** #define MAX_SS_CMDS 10
  15:.././simpleserial/simpleserial.c **** static ss_cmd commands[MAX_SS_CMDS];
  16:.././simpleserial/simpleserial.c **** static int num_commands = 0;
  17:.././simpleserial/simpleserial.c **** 
  18:.././simpleserial/simpleserial.c **** #define MAX_SS_LEN 64
  19:.././simpleserial/simpleserial.c **** 
  20:.././simpleserial/simpleserial.c **** #define SS_VER_1_0 0
  21:.././simpleserial/simpleserial.c **** #define SS_VER_1_1 1
  22:.././simpleserial/simpleserial.c **** 
  23:.././simpleserial/simpleserial.c **** static char hex_lookup[16] =
  24:.././simpleserial/simpleserial.c **** {
  25:.././simpleserial/simpleserial.c **** 	'0', '1', '2', '3', '4', '5', '6', '7',
  26:.././simpleserial/simpleserial.c **** 	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
  27:.././simpleserial/simpleserial.c **** };
  28:.././simpleserial/simpleserial.c **** 
  29:.././simpleserial/simpleserial.c **** int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
  30:.././simpleserial/simpleserial.c **** {
  31:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < len; i++)
  32:.././simpleserial/simpleserial.c **** 	{
  33:.././simpleserial/simpleserial.c **** 		char n_hi = ascii_buf[2*i];
  34:.././simpleserial/simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
  35:.././simpleserial/simpleserial.c **** 
  36:.././simpleserial/simpleserial.c **** 		if(n_lo >= '0' && n_lo <= '9')
  37:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
  38:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
  39:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
  40:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
  41:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
  42:.././simpleserial/simpleserial.c **** 		else
  43:.././simpleserial/simpleserial.c **** 			return 1;
  44:.././simpleserial/simpleserial.c **** 
  45:.././simpleserial/simpleserial.c **** 		if(n_hi >= '0' && n_hi <= '9')
  46:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
  47:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
  48:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
  49:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
  50:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
  51:.././simpleserial/simpleserial.c **** 		else
  52:.././simpleserial/simpleserial.c **** 			return 1;
  53:.././simpleserial/simpleserial.c **** 	}
  54:.././simpleserial/simpleserial.c **** 
  55:.././simpleserial/simpleserial.c **** 	return 0;
  56:.././simpleserial/simpleserial.c **** }
  57:.././simpleserial/simpleserial.c **** 
  58:.././simpleserial/simpleserial.c **** // Callback function for "v" command.
  59:.././simpleserial/simpleserial.c **** // This can exist in v1.0 as long as we don't actually send back an ack ("z")
  60:.././simpleserial/simpleserial.c **** uint8_t check_version(uint8_t* v)
  61:.././simpleserial/simpleserial.c **** {
  17               		.loc 1 61 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  62:.././simpleserial/simpleserial.c **** 	return 0x00;
  63:.././simpleserial/simpleserial.c **** }
  24               		.loc 1 63 0
  25 0000 80E0      		ldi r24,0
  26               	.LVL1:
  27 0002 0895      		ret
  28               		.cfi_endproc
  29               	.LFE12:
  31               	.global	hex_decode
  33               	hex_decode:
  34               	.LFB11:
  30:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < len; i++)
  35               		.loc 1 30 0
  36               		.cfi_startproc
  37               	.LVL2:
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  42 0004 DB01      		movw r26,r22
  43               	.LBB2:
  31:.././simpleserial/simpleserial.c **** 	{
  44               		.loc 1 31 0
  45 0006 FA01      		movw r30,r20
  46               	.LVL3:
  47               	.L3:
  31:.././simpleserial/simpleserial.c **** 	{
  48               		.loc 1 31 0 is_stmt 0 discriminator 1
  49 0008 9F01      		movw r18,r30
  50 000a 241B      		sub r18,r20
  51 000c 350B      		sbc r19,r21
  52 000e 2817      		cp r18,r24
  53 0010 3907      		cpc r19,r25
  54 0012 04F4      		brge .L18
  55               	.LBB3:
  33:.././simpleserial/simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
  56               		.loc 1 33 0 is_stmt 1
  57 0014 2C91      		ld r18,X
  58               	.LVL4:
  34:.././simpleserial/simpleserial.c **** 
  59               		.loc 1 34 0
  60 0016 1196      		adiw r26,1
  61 0018 3C91      		ld r19,X
  62 001a 1197      		sbiw r26,1
  63               	.LVL5:
  36:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
  64               		.loc 1 36 0
  65 001c 60ED      		ldi r22,lo8(-48)
  66 001e 630F      		add r22,r19
  67 0020 6A30      		cpi r22,lo8(10)
  68 0022 00F4      		brsh .L4
  37:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
  69               		.loc 1 37 0
  70 0024 6083      		st Z,r22
  71 0026 00C0      		rjmp .L5
  72               	.L4:
  38:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
  73               		.loc 1 38 0
  74 0028 6FEB      		ldi r22,lo8(-65)
  75 002a 630F      		add r22,r19
  76 002c 6630      		cpi r22,lo8(6)
  77 002e 00F4      		brsh .L6
  39:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
  78               		.loc 1 39 0
  79 0030 3753      		subi r19,lo8(-(-55))
  80               	.LVL6:
  81 0032 00C0      		rjmp .L14
  82               	.LVL7:
  83               	.L6:
  40:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
  84               		.loc 1 40 0
  85 0034 6FE9      		ldi r22,lo8(-97)
  86 0036 630F      		add r22,r19
  87 0038 6630      		cpi r22,lo8(6)
  88 003a 00F0      		brlo .L7
  89               	.LVL8:
  90               	.L12:
  43:.././simpleserial/simpleserial.c **** 
  91               		.loc 1 43 0
  92 003c 81E0      		ldi r24,lo8(1)
  93 003e 90E0      		ldi r25,0
  94               	.LVL9:
  95 0040 0895      		ret
  96               	.LVL10:
  97               	.L7:
  41:.././simpleserial/simpleserial.c **** 		else
  98               		.loc 1 41 0
  99 0042 3755      		subi r19,lo8(-(-87))
 100               	.LVL11:
 101               	.L14:
 102 0044 3083      		st Z,r19
 103               	.LVL12:
 104               	.L5:
  45:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 105               		.loc 1 45 0
 106 0046 30ED      		ldi r19,lo8(-48)
 107 0048 320F      		add r19,r18
 108 004a 3A30      		cpi r19,lo8(10)
 109 004c 00F4      		brsh .L9
  46:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
 110               		.loc 1 46 0
 111 004e 2295      		swap r18
 112               	.LVL13:
 113 0050 207F      		andi r18,lo8(-16)
 114 0052 00C0      		rjmp .L15
 115               	.LVL14:
 116               	.L9:
  47:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 117               		.loc 1 47 0
 118 0054 3FEB      		ldi r19,lo8(-65)
 119 0056 320F      		add r19,r18
 120 0058 3630      		cpi r19,lo8(6)
 121 005a 00F4      		brsh .L11
  48:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 122               		.loc 1 48 0
 123 005c 30E0      		ldi r19,0
 124 005e 2753      		subi r18,55
 125 0060 3109      		sbc r19,__zero_reg__
 126               	.LVL15:
 127 0062 00C0      		rjmp .L16
 128               	.LVL16:
 129               	.L11:
  49:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 130               		.loc 1 49 0
 131 0064 3FE9      		ldi r19,lo8(-97)
 132 0066 320F      		add r19,r18
 133 0068 3630      		cpi r19,lo8(6)
 134 006a 00F4      		brsh .L12
  50:.././simpleserial/simpleserial.c **** 		else
 135               		.loc 1 50 0
 136 006c 30E0      		ldi r19,0
 137 006e 2755      		subi r18,87
 138 0070 3109      		sbc r19,__zero_reg__
 139               	.LVL17:
 140               	.L16:
 141 0072 64E0      		ldi r22,4
 142               		1:
 143 0074 220F      		lsl r18
 144 0076 331F      		rol r19
 145 0078 6A95      		dec r22
 146 007a 01F4      		brne 1b
 147               	.L15:
 148 007c 3081      		ld r19,Z
 149 007e 232B      		or r18,r19
 150 0080 2083      		st Z,r18
 151               	.LVL18:
 152 0082 3196      		adiw r30,1
 153               	.LVL19:
 154 0084 1296      		adiw r26,2
 155 0086 00C0      		rjmp .L3
 156               	.L18:
 157               	.LBE3:
 158               	.LBE2:
  55:.././simpleserial/simpleserial.c **** }
 159               		.loc 1 55 0
 160 0088 80E0      		ldi r24,0
 161 008a 90E0      		ldi r25,0
 162               	.LVL20:
  56:.././simpleserial/simpleserial.c **** 
 163               		.loc 1 56 0
 164 008c 0895      		ret
 165               		.cfi_endproc
 166               	.LFE11:
 168               	.global	simpleserial_addcmd
 170               	simpleserial_addcmd:
 171               	.LFB14:
  64:.././simpleserial/simpleserial.c **** 
  65:.././simpleserial/simpleserial.c **** // Set up the SimpleSerial module by preparing internal commands
  66:.././simpleserial/simpleserial.c **** // This just adds the "v" command for now...
  67:.././simpleserial/simpleserial.c **** void simpleserial_init()
  68:.././simpleserial/simpleserial.c **** {
  69:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
  70:.././simpleserial/simpleserial.c **** }
  71:.././simpleserial/simpleserial.c **** 
  72:.././simpleserial/simpleserial.c **** int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
  73:.././simpleserial/simpleserial.c **** {
 172               		.loc 1 73 0
 173               		.cfi_startproc
 174               	.LVL21:
 175               	/* prologue: function */
 176               	/* frame size = 0 */
 177               	/* stack size = 0 */
 178               	.L__stack_usage = 0
  74:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS)
 179               		.loc 1 74 0
 180 008e 2091 0000 		lds r18,num_commands
 181 0092 3091 0000 		lds r19,num_commands+1
 182 0096 2A30      		cpi r18,10
 183 0098 3105      		cpc r19,__zero_reg__
 184 009a 04F4      		brge .L22
  75:.././simpleserial/simpleserial.c **** 		return 1;
  76:.././simpleserial/simpleserial.c **** 
  77:.././simpleserial/simpleserial.c **** 	if(len >= MAX_SS_LEN)
 185               		.loc 1 77 0
 186 009c 6034      		cpi r22,64
 187 009e 7105      		cpc r23,__zero_reg__
 188 00a0 00F4      		brsh .L22
  78:.././simpleserial/simpleserial.c **** 		return 1;
  79:.././simpleserial/simpleserial.c **** 
  80:.././simpleserial/simpleserial.c **** 	commands[num_commands].c   = c;
 189               		.loc 1 80 0
 190 00a2 95E0      		ldi r25,lo8(5)
 191 00a4 929F      		mul r25,r18
 192 00a6 F001      		movw r30,r0
 193 00a8 939F      		mul r25,r19
 194 00aa F00D      		add r31,r0
 195 00ac 1124      		clr __zero_reg__
 196 00ae E050      		subi r30,lo8(-(commands))
 197 00b0 F040      		sbci r31,hi8(-(commands))
 198 00b2 8083      		st Z,r24
  81:.././simpleserial/simpleserial.c **** 	commands[num_commands].len = len;
 199               		.loc 1 81 0
 200 00b4 6183      		std Z+1,r22
 201 00b6 7283      		std Z+2,r23
  82:.././simpleserial/simpleserial.c **** 	commands[num_commands].fp  = fp;
 202               		.loc 1 82 0
 203 00b8 4383      		std Z+3,r20
 204 00ba 5483      		std Z+4,r21
  83:.././simpleserial/simpleserial.c **** 	num_commands++;
 205               		.loc 1 83 0
 206 00bc 2F5F      		subi r18,-1
 207 00be 3F4F      		sbci r19,-1
 208 00c0 2093 0000 		sts num_commands,r18
 209 00c4 3093 0000 		sts num_commands+1,r19
  84:.././simpleserial/simpleserial.c **** 
  85:.././simpleserial/simpleserial.c **** 	return 0;
 210               		.loc 1 85 0
 211 00c8 80E0      		ldi r24,0
 212 00ca 90E0      		ldi r25,0
 213               	.LVL22:
 214 00cc 0895      		ret
 215               	.LVL23:
 216               	.L22:
  75:.././simpleserial/simpleserial.c **** 
 217               		.loc 1 75 0
 218 00ce 81E0      		ldi r24,lo8(1)
 219 00d0 90E0      		ldi r25,0
 220               	.LVL24:
  86:.././simpleserial/simpleserial.c **** }
 221               		.loc 1 86 0
 222 00d2 0895      		ret
 223               		.cfi_endproc
 224               	.LFE14:
 226               	.global	simpleserial_init
 228               	simpleserial_init:
 229               	.LFB13:
  68:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 230               		.loc 1 68 0
 231               		.cfi_startproc
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 234               	/* stack size = 0 */
 235               	.L__stack_usage = 0
  69:.././simpleserial/simpleserial.c **** }
 236               		.loc 1 69 0
 237 00d4 40E0      		ldi r20,lo8(gs(check_version))
 238 00d6 50E0      		ldi r21,hi8(gs(check_version))
 239 00d8 60E0      		ldi r22,0
 240 00da 70E0      		ldi r23,0
 241 00dc 86E7      		ldi r24,lo8(118)
 242 00de 0C94 0000 		jmp simpleserial_addcmd
 243               	.LVL25:
 244               		.cfi_endproc
 245               	.LFE13:
 247               	.global	simpleserial_put
 249               	simpleserial_put:
 250               	.LFB16:
  87:.././simpleserial/simpleserial.c **** 
  88:.././simpleserial/simpleserial.c **** void simpleserial_get(void)
  89:.././simpleserial/simpleserial.c **** {
  90:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
  91:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
  92:.././simpleserial/simpleserial.c **** 	char c;
  93:.././simpleserial/simpleserial.c **** 
  94:.././simpleserial/simpleserial.c **** 	// Find which command we're receiving
  95:.././simpleserial/simpleserial.c **** 	c = getch();
  96:.././simpleserial/simpleserial.c **** 
  97:.././simpleserial/simpleserial.c **** 	int cmd;
  98:.././simpleserial/simpleserial.c **** 	for(cmd = 0; cmd < num_commands; cmd++)
  99:.././simpleserial/simpleserial.c **** 	{
 100:.././simpleserial/simpleserial.c **** 		if(commands[cmd].c == c)
 101:.././simpleserial/simpleserial.c **** 			break;
 102:.././simpleserial/simpleserial.c **** 	}
 103:.././simpleserial/simpleserial.c **** 
 104:.././simpleserial/simpleserial.c **** 	// If we didn't find a match, give up right away
 105:.././simpleserial/simpleserial.c **** 	if(cmd == num_commands)
 106:.././simpleserial/simpleserial.c **** 		return;
 107:.././simpleserial/simpleserial.c **** 
 108:.././simpleserial/simpleserial.c **** 	// Receive characters until we fill the ASCII buffer
 109:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < 2*commands[cmd].len; i++)
 110:.././simpleserial/simpleserial.c **** 	{
 111:.././simpleserial/simpleserial.c **** 		c = getch();
 112:.././simpleserial/simpleserial.c **** 
 113:.././simpleserial/simpleserial.c **** 		// Check for early \n
 114:.././simpleserial/simpleserial.c **** 		if(c == '\n' || c == '\r')
 115:.././simpleserial/simpleserial.c **** 			return;
 116:.././simpleserial/simpleserial.c **** 
 117:.././simpleserial/simpleserial.c **** 		ascii_buf[i] = c;
 118:.././simpleserial/simpleserial.c **** 	}
 119:.././simpleserial/simpleserial.c **** 
 120:.././simpleserial/simpleserial.c **** 	// Assert that last character is \n or \r
 121:.././simpleserial/simpleserial.c **** 	c = getch();
 122:.././simpleserial/simpleserial.c **** 	if(c != '\n' && c != '\r')
 123:.././simpleserial/simpleserial.c **** 		return;
 124:.././simpleserial/simpleserial.c **** 
 125:.././simpleserial/simpleserial.c **** 	// ASCII buffer is full: convert to bytes 
 126:.././simpleserial/simpleserial.c **** 	// Check for illegal characters here
 127:.././simpleserial/simpleserial.c **** 	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 128:.././simpleserial/simpleserial.c **** 		return;
 129:.././simpleserial/simpleserial.c **** 
 130:.././simpleserial/simpleserial.c **** 	// Callback
 131:.././simpleserial/simpleserial.c **** 	uint8_t ret[1];
 132:.././simpleserial/simpleserial.c **** 	ret[0] = commands[cmd].fp(data_buf);
 133:.././simpleserial/simpleserial.c **** 	
 134:.././simpleserial/simpleserial.c **** 	// Acknowledge (if version is 1.1)
 135:.././simpleserial/simpleserial.c **** #if SS_VER == SS_VER_1_1
 136:.././simpleserial/simpleserial.c **** 	simpleserial_put('z', 1, ret);
 137:.././simpleserial/simpleserial.c **** #endif
 138:.././simpleserial/simpleserial.c **** }
 139:.././simpleserial/simpleserial.c **** 
 140:.././simpleserial/simpleserial.c **** void simpleserial_put(char c, int size, uint8_t* output)
 141:.././simpleserial/simpleserial.c **** {
 251               		.loc 1 141 0
 252               		.cfi_startproc
 253               	.LVL26:
 254 00e2 CF92      		push r12
 255               	.LCFI0:
 256               		.cfi_def_cfa_offset 4
 257               		.cfi_offset 12, -3
 258 00e4 DF92      		push r13
 259               	.LCFI1:
 260               		.cfi_def_cfa_offset 5
 261               		.cfi_offset 13, -4
 262 00e6 EF92      		push r14
 263               	.LCFI2:
 264               		.cfi_def_cfa_offset 6
 265               		.cfi_offset 14, -5
 266 00e8 FF92      		push r15
 267               	.LCFI3:
 268               		.cfi_def_cfa_offset 7
 269               		.cfi_offset 15, -6
 270 00ea 0F93      		push r16
 271               	.LCFI4:
 272               		.cfi_def_cfa_offset 8
 273               		.cfi_offset 16, -7
 274 00ec 1F93      		push r17
 275               	.LCFI5:
 276               		.cfi_def_cfa_offset 9
 277               		.cfi_offset 17, -8
 278 00ee CF93      		push r28
 279               	.LCFI6:
 280               		.cfi_def_cfa_offset 10
 281               		.cfi_offset 28, -9
 282 00f0 DF93      		push r29
 283               	.LCFI7:
 284               		.cfi_def_cfa_offset 11
 285               		.cfi_offset 29, -10
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 8 */
 289               	.L__stack_usage = 8
 290 00f2 8B01      		movw r16,r22
 291 00f4 EA01      		movw r28,r20
 142:.././simpleserial/simpleserial.c **** 	// Write first character
 143:.././simpleserial/simpleserial.c **** 	putch(c);
 292               		.loc 1 143 0
 293 00f6 0E94 0000 		call output_ch_0
 294               	.LVL27:
 295               	.LBB4:
 144:.././simpleserial/simpleserial.c **** 
 145:.././simpleserial/simpleserial.c **** 	// Write each byte as two nibbles
 146:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < size; i++)
 296               		.loc 1 146 0
 297 00fa 7E01      		movw r14,r28
 298               	.LVL28:
 299               	.L25:
 300               		.loc 1 146 0 is_stmt 0 discriminator 1
 301 00fc C701      		movw r24,r14
 302 00fe 8C1B      		sub r24,r28
 303 0100 9D0B      		sbc r25,r29
 304 0102 8017      		cp r24,r16
 305 0104 9107      		cpc r25,r17
 306 0106 04F4      		brge .L27
 307 0108 6701      		movw r12,r14
 147:.././simpleserial/simpleserial.c **** 	{
 148:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] >> 4 ]);
 308               		.loc 1 148 0 is_stmt 1 discriminator 3
 309 010a D701      		movw r26,r14
 310 010c ED91      		ld r30,X+
 311 010e 7D01      		movw r14,r26
 312               	.LVL29:
 313 0110 E295      		swap r30
 314 0112 EF70      		andi r30,lo8(15)
 315 0114 F0E0      		ldi r31,0
 316 0116 E050      		subi r30,lo8(-(hex_lookup))
 317 0118 F040      		sbci r31,hi8(-(hex_lookup))
 318 011a 8081      		ld r24,Z
 319 011c 0E94 0000 		call output_ch_0
 320               	.LVL30:
 149:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] & 0xF]);
 321               		.loc 1 149 0 discriminator 3
 322 0120 D601      		movw r26,r12
 323 0122 EC91      		ld r30,X
 324 0124 EF70      		andi r30,lo8(15)
 325 0126 F0E0      		ldi r31,0
 326 0128 E050      		subi r30,lo8(-(hex_lookup))
 327 012a F040      		sbci r31,hi8(-(hex_lookup))
 328 012c 8081      		ld r24,Z
 329 012e 0E94 0000 		call output_ch_0
 330               	.LVL31:
 331 0132 00C0      		rjmp .L25
 332               	.L27:
 333               	.LBE4:
 150:.././simpleserial/simpleserial.c **** 	}
 151:.././simpleserial/simpleserial.c **** 
 152:.././simpleserial/simpleserial.c **** 	// Write trailing '\n'
 153:.././simpleserial/simpleserial.c **** 	putch('\n');
 334               		.loc 1 153 0
 335 0134 8AE0      		ldi r24,lo8(10)
 336               	/* epilogue start */
 154:.././simpleserial/simpleserial.c **** }
 337               		.loc 1 154 0
 338 0136 DF91      		pop r29
 339 0138 CF91      		pop r28
 340               	.LVL32:
 341 013a 1F91      		pop r17
 342 013c 0F91      		pop r16
 343               	.LVL33:
 344 013e FF90      		pop r15
 345 0140 EF90      		pop r14
 346               	.LVL34:
 347 0142 DF90      		pop r13
 348 0144 CF90      		pop r12
 153:.././simpleserial/simpleserial.c **** }
 349               		.loc 1 153 0
 350 0146 0C94 0000 		jmp output_ch_0
 351               	.LVL35:
 352               		.cfi_endproc
 353               	.LFE16:
 355               	.global	simpleserial_get
 357               	simpleserial_get:
 358               	.LFB15:
  89:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 359               		.loc 1 89 0
 360               		.cfi_startproc
 361 014a AF92      		push r10
 362               	.LCFI8:
 363               		.cfi_def_cfa_offset 4
 364               		.cfi_offset 10, -3
 365 014c BF92      		push r11
 366               	.LCFI9:
 367               		.cfi_def_cfa_offset 5
 368               		.cfi_offset 11, -4
 369 014e CF92      		push r12
 370               	.LCFI10:
 371               		.cfi_def_cfa_offset 6
 372               		.cfi_offset 12, -5
 373 0150 DF92      		push r13
 374               	.LCFI11:
 375               		.cfi_def_cfa_offset 7
 376               		.cfi_offset 13, -6
 377 0152 EF92      		push r14
 378               	.LCFI12:
 379               		.cfi_def_cfa_offset 8
 380               		.cfi_offset 14, -7
 381 0154 FF92      		push r15
 382               	.LCFI13:
 383               		.cfi_def_cfa_offset 9
 384               		.cfi_offset 15, -8
 385 0156 0F93      		push r16
 386               	.LCFI14:
 387               		.cfi_def_cfa_offset 10
 388               		.cfi_offset 16, -9
 389 0158 1F93      		push r17
 390               	.LCFI15:
 391               		.cfi_def_cfa_offset 11
 392               		.cfi_offset 17, -10
 393 015a CF93      		push r28
 394               	.LCFI16:
 395               		.cfi_def_cfa_offset 12
 396               		.cfi_offset 28, -11
 397 015c DF93      		push r29
 398               	.LCFI17:
 399               		.cfi_def_cfa_offset 13
 400               		.cfi_offset 29, -12
 401 015e CDB7      		in r28,__SP_L__
 402 0160 DEB7      		in r29,__SP_H__
 403               	.LCFI18:
 404               		.cfi_def_cfa_register 28
 405 0162 C15C      		subi r28,-63
 406 0164 D109      		sbc r29,__zero_reg__
 407               	.LCFI19:
 408               		.cfi_def_cfa_offset 206
 409 0166 CDBF      		out __SP_L__,r28
 410 0168 DEBF      		out __SP_H__,r29
 411               	/* prologue: function */
 412               	/* frame size = 193 */
 413               	/* stack size = 203 */
 414               	.L__stack_usage = 203
  95:.././simpleserial/simpleserial.c **** 
 415               		.loc 1 95 0
 416 016a 0E94 0000 		call input_ch_0
 417               	.LVL36:
  98:.././simpleserial/simpleserial.c **** 	{
 418               		.loc 1 98 0
 419 016e 4091 0000 		lds r20,num_commands
 420 0172 5091 0000 		lds r21,num_commands+1
 421 0176 20E0      		ldi r18,lo8(commands)
 422 0178 30E0      		ldi r19,hi8(commands)
 423 017a 00E0      		ldi r16,0
 424 017c 10E0      		ldi r17,0
 425               	.LVL37:
 426               	.L29:
  98:.././simpleserial/simpleserial.c **** 	{
 427               		.loc 1 98 0 is_stmt 0 discriminator 1
 428 017e 0417      		cp r16,r20
 429 0180 1507      		cpc r17,r21
 430 0182 04F4      		brge .L46
 431 0184 2B5F      		subi r18,-5
 432 0186 3F4F      		sbci r19,-1
 100:.././simpleserial/simpleserial.c **** 			break;
 433               		.loc 1 100 0 is_stmt 1
 434 0188 F901      		movw r30,r18
 435 018a 3597      		sbiw r30,5
 436 018c 9081      		ld r25,Z
 437 018e 8917      		cp r24,r25
 438 0190 01F0      		breq .L30
  98:.././simpleserial/simpleserial.c **** 	{
 439               		.loc 1 98 0 discriminator 2
 440 0192 0F5F      		subi r16,-1
 441 0194 1F4F      		sbci r17,-1
 442               	.LVL38:
 443 0196 00C0      		rjmp .L29
 444               	.L46:
 105:.././simpleserial/simpleserial.c **** 		return;
 445               		.loc 1 105 0
 446 0198 0417      		cp r16,r20
 447 019a 1507      		cpc r17,r21
 448 019c 01F4      		brne .+2
 449 019e 00C0      		rjmp .L28
 450               	.L30:
 451 01a0 9E01      		movw r18,r28
 452 01a2 2F5F      		subi r18,-1
 453 01a4 3F4F      		sbci r19,-1
 454 01a6 7901      		movw r14,r18
  98:.././simpleserial/simpleserial.c **** 	{
 455               		.loc 1 98 0 discriminator 1
 456 01a8 6901      		movw r12,r18
 457               	.LBB5:
 109:.././simpleserial/simpleserial.c **** 	{
 458               		.loc 1 109 0 discriminator 1
 459 01aa 25E0      		ldi r18,lo8(5)
 460 01ac 209F      		mul r18,r16
 461 01ae C001      		movw r24,r0
 462 01b0 219F      		mul r18,r17
 463 01b2 900D      		add r25,r0
 464 01b4 1124      		clr __zero_reg__
 465               	.LVL39:
 466 01b6 DC01      		movw r26,r24
 467 01b8 A050      		subi r26,lo8(-(commands+1))
 468 01ba B040      		sbci r27,hi8(-(commands+1))
 469 01bc 5D01      		movw r10,r26
 470               	.L33:
 471 01be D501      		movw r26,r10
 472 01c0 8D91      		ld r24,X+
 473 01c2 9C91      		ld r25,X
 474 01c4 880F      		lsl r24
 475 01c6 991F      		rol r25
 476 01c8 9601      		movw r18,r12
 477 01ca 2E19      		sub r18,r14
 478 01cc 3F09      		sbc r19,r15
 479 01ce 2817      		cp r18,r24
 480 01d0 3907      		cpc r19,r25
 481 01d2 00F4      		brsh .L47
 111:.././simpleserial/simpleserial.c **** 
 482               		.loc 1 111 0
 483 01d4 0E94 0000 		call input_ch_0
 484               	.LVL40:
 114:.././simpleserial/simpleserial.c **** 			return;
 485               		.loc 1 114 0
 486 01d8 8A30      		cpi r24,lo8(10)
 487 01da 01F0      		breq .L28
 114:.././simpleserial/simpleserial.c **** 			return;
 488               		.loc 1 114 0 is_stmt 0 discriminator 1
 489 01dc 8D30      		cpi r24,lo8(13)
 490 01de 01F0      		breq .L28
 117:.././simpleserial/simpleserial.c **** 	}
 491               		.loc 1 117 0 is_stmt 1 discriminator 2
 492 01e0 F601      		movw r30,r12
 493 01e2 8193      		st Z+,r24
 494 01e4 6F01      		movw r12,r30
 495 01e6 00C0      		rjmp .L33
 496               	.LVL41:
 497               	.L47:
 498               	.LBE5:
 121:.././simpleserial/simpleserial.c **** 	if(c != '\n' && c != '\r')
 499               		.loc 1 121 0
 500 01e8 0E94 0000 		call input_ch_0
 501               	.LVL42:
 122:.././simpleserial/simpleserial.c **** 		return;
 502               		.loc 1 122 0
 503 01ec 8A30      		cpi r24,lo8(10)
 504 01ee 01F0      		breq .L35
 122:.././simpleserial/simpleserial.c **** 		return;
 505               		.loc 1 122 0 is_stmt 0 discriminator 1
 506 01f0 8D30      		cpi r24,lo8(13)
 507 01f2 01F4      		brne .L28
 508               	.L35:
 127:.././simpleserial/simpleserial.c **** 		return;
 509               		.loc 1 127 0 is_stmt 1
 510 01f4 25E0      		ldi r18,lo8(5)
 511 01f6 209F      		mul r18,r16
 512 01f8 C001      		movw r24,r0
 513 01fa 219F      		mul r18,r17
 514 01fc 900D      		add r25,r0
 515 01fe 1124      		clr __zero_reg__
 516               	.LVL43:
 517 0200 8C01      		movw r16,r24
 518               	.LVL44:
 519 0202 0050      		subi r16,lo8(-(commands))
 520 0204 1040      		sbci r17,hi8(-(commands))
 521 0206 AE01      		movw r20,r28
 522 0208 4F57      		subi r20,127
 523 020a 5F4F      		sbci r21,-1
 524 020c B701      		movw r22,r14
 525 020e F801      		movw r30,r16
 526 0210 8181      		ldd r24,Z+1
 527 0212 9281      		ldd r25,Z+2
 528 0214 0E94 0000 		call hex_decode
 529               	.LVL45:
 530 0218 892B      		or r24,r25
 531 021a 01F4      		brne .L28
 132:.././simpleserial/simpleserial.c **** 	
 532               		.loc 1 132 0
 533 021c D801      		movw r26,r16
 534 021e 1396      		adiw r26,3
 535 0220 ED91      		ld r30,X+
 536 0222 FC91      		ld r31,X
 537 0224 1497      		sbiw r26,3+1
 538 0226 CE01      		movw r24,r28
 539 0228 8F57      		subi r24,127
 540 022a 9F4F      		sbci r25,-1
 541 022c 1995      		eicall
 542               	.LVL46:
 543 022e CF53      		subi r28,lo8(-193)
 544 0230 DF4F      		sbci r29,hi8(-193)
 545 0232 8883      		st Y,r24
 546 0234 C15C      		subi r28,lo8(193)
 547 0236 D040      		sbci r29,hi8(193)
 136:.././simpleserial/simpleserial.c **** #endif
 548               		.loc 1 136 0
 549 0238 AE01      		movw r20,r28
 550 023a 4F53      		subi r20,63
 551 023c 5F4F      		sbci r21,-1
 552 023e 61E0      		ldi r22,lo8(1)
 553 0240 70E0      		ldi r23,0
 554 0242 8AE7      		ldi r24,lo8(122)
 555 0244 0E94 0000 		call simpleserial_put
 556               	.LVL47:
 557               	.L28:
 558               	/* epilogue start */
 138:.././simpleserial/simpleserial.c **** 
 559               		.loc 1 138 0
 560 0248 CF53      		subi r28,63
 561 024a DF4F      		sbci r29,-1
 562 024c CDBF      		out __SP_L__,r28
 563 024e DEBF      		out __SP_H__,r29
 564 0250 DF91      		pop r29
 565 0252 CF91      		pop r28
 566 0254 1F91      		pop r17
 567 0256 0F91      		pop r16
 568 0258 FF90      		pop r15
 569 025a EF90      		pop r14
 570 025c DF90      		pop r13
 571 025e CF90      		pop r12
 572 0260 BF90      		pop r11
 573 0262 AF90      		pop r10
 574 0264 0895      		ret
 575               		.cfi_endproc
 576               	.LFE15:
 578               		.section	.rodata
 581               	hex_lookup:
 582 0000 30        		.byte	48
 583 0001 31        		.byte	49
 584 0002 32        		.byte	50
 585 0003 33        		.byte	51
 586 0004 34        		.byte	52
 587 0005 35        		.byte	53
 588 0006 36        		.byte	54
 589 0007 37        		.byte	55
 590 0008 38        		.byte	56
 591 0009 39        		.byte	57
 592 000a 41        		.byte	65
 593 000b 42        		.byte	66
 594 000c 43        		.byte	67
 595 000d 44        		.byte	68
 596 000e 45        		.byte	69
 597 000f 46        		.byte	70
 598               		.local	num_commands
 599               		.comm	num_commands,2,1
 600               		.local	commands
 601               		.comm	commands,50,1
 602               		.text
 603               	.Letext0:
 604               		.file 2 "/usr/lib/avr/include/stdint.h"
 605               		.file 3 ".././hal/xmega/uart.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 simpleserial.c
     /tmp/cc5As3rL.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc5As3rL.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc5As3rL.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc5As3rL.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc5As3rL.s:6      *ABS*:0000000000000034 __CCP__
     /tmp/cc5As3rL.s:7      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc5As3rL.s:8      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc5As3rL.s:14     .text:0000000000000000 check_version
     /tmp/cc5As3rL.s:33     .text:0000000000000004 hex_decode
     /tmp/cc5As3rL.s:170    .text:000000000000008e simpleserial_addcmd
                             .bss:0000000000000000 num_commands
     /tmp/cc5As3rL.s:599    .bss:0000000000000002 commands
     /tmp/cc5As3rL.s:228    .text:00000000000000d4 simpleserial_init
     /tmp/cc5As3rL.s:249    .text:00000000000000e2 simpleserial_put
     /tmp/cc5As3rL.s:581    .rodata:0000000000000000 hex_lookup
     /tmp/cc5As3rL.s:357    .text:000000000000014a simpleserial_get

UNDEFINED SYMBOLS
output_ch_0
input_ch_0
__do_copy_data
__do_clear_bss
